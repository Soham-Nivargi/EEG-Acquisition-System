
ads.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb4  08004eb4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004eb4  08004eb4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004eb4  08004eb4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08004f18  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004f18  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000096c0  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000198d  00000000  00000000  00029788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002b118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a5  00000000  00000000  0002b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000166c1  00000000  00000000  0002c065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8aa  00000000  00000000  00042726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008218a  00000000  00000000  0004cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027c4  00000000  00000000  000cf15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d1920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d00 	.word	0x08004d00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004d00 	.word	0x08004d00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <delay_try>:
//    uint32_t start_tick = SysTick->VAL;
//
//    while(SysTick->VAL - start_tick < ticks);
//}
//__attribute__((always_inline))
void delay_try(unsigned delay){
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	int i=0;
 8000164:	2300      	movs	r3, #0
 8000166:	60fb      	str	r3, [r7, #12]
	for(i=0; i<delay; i++){
 8000168:	2300      	movs	r3, #0
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	e003      	b.n	8000176 <delay_try+0x1a>
		__NOP();
 800016e:	bf00      	nop
	for(i=0; i<delay; i++){
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	3301      	adds	r3, #1
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	429a      	cmp	r2, r3
 800017c:	d8f7      	bhi.n	800016e <delay_try+0x12>
	}
}
 800017e:	bf00      	nop
 8000180:	bf00      	nop
 8000182:	3714      	adds	r7, #20
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
	...

0800018c <rreg_command>:
uint8_t rreg_command(uint8_t buffer1, uint8_t buffer2){
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	460a      	mov	r2, r1
 8000196:	71fb      	strb	r3, [r7, #7]
 8000198:	4613      	mov	r3, r2
 800019a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2140      	movs	r1, #64	; 0x40
 80001a0:	4815      	ldr	r0, [pc, #84]	; (80001f8 <rreg_command+0x6c>)
 80001a2:	f002 f808 	bl	80021b6 <HAL_GPIO_WritePin>
	uint8_t device;
	  //delay_try(10);
//	uint8_t buffer1_x = 0x20 | buffer1;
//	uint8_t buffer2_x = 0x00;
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&buffer1, 1, 0x1000);   //MOSI
 80001a6:	1df9      	adds	r1, r7, #7
 80001a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ac:	2201      	movs	r2, #1
 80001ae:	4813      	ldr	r0, [pc, #76]	; (80001fc <rreg_command+0x70>)
 80001b0:	f002 fcd0 	bl	8002b54 <HAL_SPI_Transmit>
	  delay_try(2);//delay 4 t_clk
 80001b4:	2002      	movs	r0, #2
 80001b6:	f7ff ffd1 	bl	800015c <delay_try>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&buffer2, 1, 0x1000);  //MOSI
 80001ba:	1db9      	adds	r1, r7, #6
 80001bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001c0:	2201      	movs	r2, #1
 80001c2:	480e      	ldr	r0, [pc, #56]	; (80001fc <rreg_command+0x70>)
 80001c4:	f002 fcc6 	bl	8002b54 <HAL_SPI_Transmit>
	  delay_try(2);//delay 4 t_clk
 80001c8:	2002      	movs	r0, #2
 80001ca:	f7ff ffc7 	bl	800015c <delay_try>
	  HAL_SPI_Receive(&hspi1, (uint8_t *)&device, 1, 0x1000);
 80001ce:	f107 010f 	add.w	r1, r7, #15
 80001d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001d6:	2201      	movs	r2, #1
 80001d8:	4808      	ldr	r0, [pc, #32]	; (80001fc <rreg_command+0x70>)
 80001da:	f002 fdfe 	bl	8002dda <HAL_SPI_Receive>
	  delay_try(10);
 80001de:	200a      	movs	r0, #10
 80001e0:	f7ff ffbc 	bl	800015c <delay_try>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2140      	movs	r1, #64	; 0x40
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <rreg_command+0x6c>)
 80001ea:	f001 ffe4 	bl	80021b6 <HAL_GPIO_WritePin>

	return device;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3710      	adds	r7, #16
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	40010c00 	.word	0x40010c00
 80001fc:	20000078 	.word	0x20000078

08000200 <wrreg_command>:


void wrreg_command(uint8_t reg_addr, uint8_t val_hex){
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4816      	ldr	r0, [pc, #88]	; (8000270 <wrreg_command+0x70>)
 8000216:	f001 ffce 	bl	80021b6 <HAL_GPIO_WritePin>
   uint8_t adress = 0x40|reg_addr;
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000220:	b2db      	uxtb	r3, r3
 8000222:	73fb      	strb	r3, [r7, #15]
   uint8_t dummy1 = 0x00;
 8000224:	2300      	movs	r3, #0
 8000226:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(&hspi1, (uint8_t*)&adress, 1, 0x1000);
 8000228:	f107 010f 	add.w	r1, r7, #15
 800022c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000230:	2201      	movs	r2, #1
 8000232:	4810      	ldr	r0, [pc, #64]	; (8000274 <wrreg_command+0x74>)
 8000234:	f002 fc8e 	bl	8002b54 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(&hspi1, (uint8_t*)&dummy1, 1, 0x1000);
 8000238:	f107 010e 	add.w	r1, r7, #14
 800023c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000240:	2201      	movs	r2, #1
 8000242:	480c      	ldr	r0, [pc, #48]	; (8000274 <wrreg_command+0x74>)
 8000244:	f002 fc86 	bl	8002b54 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(&hspi1, (uint8_t*)&val_hex, 1, 0x1000);
 8000248:	1db9      	adds	r1, r7, #6
 800024a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024e:	2201      	movs	r2, #1
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <wrreg_command+0x74>)
 8000252:	f002 fc7f 	bl	8002b54 <HAL_SPI_Transmit>
   delay_try(100);
 8000256:	2064      	movs	r0, #100	; 0x64
 8000258:	f7ff ff80 	bl	800015c <delay_try>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800025c:	2201      	movs	r2, #1
 800025e:	2140      	movs	r1, #64	; 0x40
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <wrreg_command+0x70>)
 8000262:	f001 ffa8 	bl	80021b6 <HAL_GPIO_WritePin>
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010c00 	.word	0x40010c00
 8000274:	20000078 	.word	0x20000078

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b5b0      	push	{r4, r5, r7, lr}
 800027a:	b0ea      	sub	sp, #424	; 0x1a8
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800027e:	f001 fbdd 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000282:	f001 f931 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f001 f9cf 	bl	8001628 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800028a:	f001 f9a3 	bl	80015d4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800028e:	f001 f96b 	bl	8001568 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  	uint8_t sdatac = 0x11;
 8000292:	2311      	movs	r3, #17
 8000294:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
	uint8_t buf1 = 0x20;
 8000298:	2320      	movs	r3, #32
 800029a:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
	uint8_t start = 0x08;
 800029e:	2308      	movs	r3, #8
 80002a0:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
	uint8_t rdatac = 0x10;
 80002a4:	2310      	movs	r3, #16
 80002a6:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
	uint8_t rdata = 0x12;
 80002aa:	2312      	movs	r3, #18
 80002ac:	f887 3191 	strb.w	r3, [r7, #401]	; 0x191
	uint8_t buffer2 = 0x00;
 80002b0:	2300      	movs	r3, #0
 80002b2:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
	uint8_t rst = 0x06;
 80002b6:	2306      	movs	r3, #6
 80002b8:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174

	uint8_t config1 = 0x01;
 80002bc:	2301      	movs	r3, #1
 80002be:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
	uint8_t config2 = 0x02;
 80002c2:	2302      	movs	r3, #2
 80002c4:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
	uint8_t config3 = 0x03;
 80002c8:	2303      	movs	r3, #3
 80002ca:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
	uint8_t loff = 0x04;
 80002ce:	2304      	movs	r3, #4
 80002d0:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
	uint8_t ch1set = 0x05;
 80002d4:	2305      	movs	r3, #5
 80002d6:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
	uint8_t ch2set = 0x06;
 80002da:	2306      	movs	r3, #6
 80002dc:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
	uint8_t ch3set = 0x07;
 80002e0:	2307      	movs	r3, #7
 80002e2:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
	uint8_t ch4set = 0x08;
 80002e6:	2308      	movs	r3, #8
 80002e8:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
	uint8_t ch5set = 0x09;
 80002ec:	2309      	movs	r3, #9
 80002ee:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	uint8_t ch6set = 0x0A;
 80002f2:	230a      	movs	r3, #10
 80002f4:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
	uint8_t ch7set = 0x0B;
 80002f8:	230b      	movs	r3, #11
 80002fa:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	uint8_t ch8set = 0x0C;
 80002fe:	230c      	movs	r3, #12
 8000300:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	uint8_t bias_sensp = 0x0D;
 8000304:	230d      	movs	r3, #13
 8000306:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
	uint8_t bias_sensn = 0x0E;
 800030a:	230e      	movs	r3, #14
 800030c:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
	uint8_t loff_sensp = 0x0F;
 8000310:	230f      	movs	r3, #15
 8000312:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
	uint8_t loff_sensn = 0x10;
 8000316:	2310      	movs	r3, #16
 8000318:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
	uint8_t loff_flip = 0x11;
 800031c:	2311      	movs	r3, #17
 800031e:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
	uint8_t loff_statp = 0x12;
 8000322:	2312      	movs	r3, #18
 8000324:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
	uint8_t loff_statn = 0x13;
 8000328:	2313      	movs	r3, #19
 800032a:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
	uint8_t gpio = 0x14;
 800032e:	2314      	movs	r3, #20
 8000330:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
	uint8_t misc1 = 0x15;
 8000334:	2315      	movs	r3, #21
 8000336:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
	uint8_t misc2 = 0x16;
 800033a:	2316      	movs	r3, #22
 800033c:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
	uint8_t config4 = 0x17;
 8000340:	2317      	movs	r3, #23
 8000342:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179

  delay_try(100);
 8000346:	2064      	movs	r0, #100	; 0x64
 8000348:	f7ff ff08 	bl	800015c <delay_try>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2140      	movs	r1, #64	; 0x40
 8000350:	48df      	ldr	r0, [pc, #892]	; (80006d0 <main+0x458>)
 8000352:	f001 ff30 	bl	80021b6 <HAL_GPIO_WritePin>
 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035c:	48dc      	ldr	r0, [pc, #880]	; (80006d0 <main+0x458>)
 800035e:	f001 ff2a 	bl	80021b6 <HAL_GPIO_WritePin>
  delay_try(50);
 8000362:	2032      	movs	r0, #50	; 0x32
 8000364:	f7ff fefa 	bl	800015c <delay_try>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2140      	movs	r1, #64	; 0x40
 800036c:	48d8      	ldr	r0, [pc, #864]	; (80006d0 <main+0x458>)
 800036e:	f001 ff22 	bl	80021b6 <HAL_GPIO_WritePin>

  delay_try(10);
 8000372:	200a      	movs	r0, #10
 8000374:	f7ff fef2 	bl	800015c <delay_try>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	48d4      	ldr	r0, [pc, #848]	; (80006d0 <main+0x458>)
 800037e:	f001 ff1a 	bl	80021b6 <HAL_GPIO_WritePin>
  delay_try(4);
 8000382:	2004      	movs	r0, #4
 8000384:	f7ff feea 	bl	800015c <delay_try>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)&rst, 1, 0x1000);
 8000388:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 800038c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000390:	2201      	movs	r2, #1
 8000392:	48d0      	ldr	r0, [pc, #832]	; (80006d4 <main+0x45c>)
 8000394:	f002 fbde 	bl	8002b54 <HAL_SPI_Transmit>
  delay_try(100);
 8000398:	2064      	movs	r0, #100	; 0x64
 800039a:	f7ff fedf 	bl	800015c <delay_try>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	2140      	movs	r1, #64	; 0x40
 80003a2:	48cb      	ldr	r0, [pc, #812]	; (80006d0 <main+0x458>)
 80003a4:	f001 ff07 	bl	80021b6 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2140      	movs	r1, #64	; 0x40
 80003ac:	48c8      	ldr	r0, [pc, #800]	; (80006d0 <main+0x458>)
 80003ae:	f001 ff02 	bl	80021b6 <HAL_GPIO_WritePin>
  delay_try(4);
 80003b2:	2004      	movs	r0, #4
 80003b4:	f7ff fed2 	bl	800015c <delay_try>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&sdatac, 1, 0x1000);
 80003b8:	f507 71bb 	add.w	r1, r7, #374	; 0x176
 80003bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c0:	2201      	movs	r2, #1
 80003c2:	48c4      	ldr	r0, [pc, #784]	; (80006d4 <main+0x45c>)
 80003c4:	f002 fbc6 	bl	8002b54 <HAL_SPI_Transmit>
  delay_try(100);
 80003c8:	2064      	movs	r0, #100	; 0x64
 80003ca:	f7ff fec7 	bl	800015c <delay_try>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	48bf      	ldr	r0, [pc, #764]	; (80006d0 <main+0x458>)
 80003d4:	f001 feef 	bl	80021b6 <HAL_GPIO_WritePin>

  delay_try(100);
 80003d8:	2064      	movs	r0, #100	; 0x64
 80003da:	f7ff febf 	bl	800015c <delay_try>
//  delay_try(2);//delay 4 t_clk
//  HAL_SPI_Receive(&hspi1, (uint8_t *)&device, 1, 0x1000);    //MISO
//
    uint8_t buffer1;

  	buffer1 = buf1 | 0x00;
 80003de:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 80003e2:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
    uint8_t read_byte = rreg_command(buffer1, buffer2);
 80003e6:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 80003ea:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80003ee:	4611      	mov	r1, r2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff fecb 	bl	800018c <rreg_command>
 80003f6:	4603      	mov	r3, r0
 80003f8:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    uint8_t dev_id[] = "Device Id is : ";
 80003fc:	4bb6      	ldr	r3, [pc, #728]	; (80006d8 <main+0x460>)
 80003fe:	f507 74b2 	add.w	r4, r7, #356	; 0x164
 8000402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, dev_id, sizeof(dev_id) - 1, 0x1000); // -1 to exclude null terminator
 8000408:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 800040c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000410:	220f      	movs	r2, #15
 8000412:	48b2      	ldr	r0, [pc, #712]	; (80006dc <main+0x464>)
 8000414:	f003 f9ee 	bl	80037f4 <HAL_UART_Transmit>
    char ads[16];
    sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000418:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 800041c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000420:	49af      	ldr	r1, [pc, #700]	; (80006e0 <main+0x468>)
 8000422:	4618      	mov	r0, r3
 8000424:	f003 ffba 	bl	800439c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000428:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff fe8d 	bl	800014c <strlen>
 8000432:	4603      	mov	r3, r0
 8000434:	b29a      	uxth	r2, r3
 8000436:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 800043a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800043e:	48a7      	ldr	r0, [pc, #668]	; (80006dc <main+0x464>)
 8000440:	f003 f9d8 	bl	80037f4 <HAL_UART_Transmit>

    buffer1 = buf1 | config1;
 8000444:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000448:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800044c:	4313      	orrs	r3, r2
 800044e:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
    read_byte = rreg_command(buffer1, buffer2);
 8000452:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000456:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 800045a:	4611      	mov	r1, r2
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe95 	bl	800018c <rreg_command>
 8000462:	4603      	mov	r3, r0
 8000464:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    uint8_t c1[] = "Config1 is : ";
 8000468:	4b9e      	ldr	r3, [pc, #632]	; (80006e4 <main+0x46c>)
 800046a:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 800046e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000470:	c407      	stmia	r4!, {r0, r1, r2}
 8000472:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, c1, sizeof(c1) - 1, 0x1000); // -1 to exclude null terminator
 8000474:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 8000478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800047c:	220d      	movs	r2, #13
 800047e:	4897      	ldr	r0, [pc, #604]	; (80006dc <main+0x464>)
 8000480:	f003 f9b8 	bl	80037f4 <HAL_UART_Transmit>
    sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000484:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000488:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800048c:	4994      	ldr	r1, [pc, #592]	; (80006e0 <main+0x468>)
 800048e:	4618      	mov	r0, r3
 8000490:	f003 ff84 	bl	800439c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000494:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff fe57 	bl	800014c <strlen>
 800049e:	4603      	mov	r3, r0
 80004a0:	b29a      	uxth	r2, r3
 80004a2:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80004a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004aa:	488c      	ldr	r0, [pc, #560]	; (80006dc <main+0x464>)
 80004ac:	f003 f9a2 	bl	80037f4 <HAL_UART_Transmit>

    buffer1 = buf1 | config2;
 80004b0:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80004b4:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 80004b8:	4313      	orrs	r3, r2
 80004ba:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
    read_byte = rreg_command(buffer1, buffer2);
 80004be:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 80004c2:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe5f 	bl	800018c <rreg_command>
 80004ce:	4603      	mov	r3, r0
 80004d0:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c2[] = "Config2 is : ";
 80004d4:	4b84      	ldr	r3, [pc, #528]	; (80006e8 <main+0x470>)
 80004d6:	f507 749a 	add.w	r4, r7, #308	; 0x134
 80004da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004dc:	c407      	stmia	r4!, {r0, r1, r2}
 80004de:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c2, sizeof(c2) - 1, 0x1000); // -1 to exclude null terminator
 80004e0:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80004e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e8:	220d      	movs	r2, #13
 80004ea:	487c      	ldr	r0, [pc, #496]	; (80006dc <main+0x464>)
 80004ec:	f003 f982 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 80004f0:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80004f4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80004f8:	4979      	ldr	r1, [pc, #484]	; (80006e0 <main+0x468>)
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 ff4e 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000500:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe21 	bl	800014c <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b29a      	uxth	r2, r3
 800050e:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000516:	4871      	ldr	r0, [pc, #452]	; (80006dc <main+0x464>)
 8000518:	f003 f96c 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | config3;
 800051c:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000520:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8000524:	4313      	orrs	r3, r2
 8000526:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 800052a:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 800052e:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe29 	bl	800018c <rreg_command>
 800053a:	4603      	mov	r3, r0
 800053c:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c3[] = "Config3 is : ";
 8000540:	4b6a      	ldr	r3, [pc, #424]	; (80006ec <main+0x474>)
 8000542:	f507 7492 	add.w	r4, r7, #292	; 0x124
 8000546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000548:	c407      	stmia	r4!, {r0, r1, r2}
 800054a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c3, sizeof(c3) - 1, 0x1000); // -1 to exclude null terminator
 800054c:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8000550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000554:	220d      	movs	r2, #13
 8000556:	4861      	ldr	r0, [pc, #388]	; (80006dc <main+0x464>)
 8000558:	f003 f94c 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 800055c:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000560:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000564:	495e      	ldr	r1, [pc, #376]	; (80006e0 <main+0x468>)
 8000566:	4618      	mov	r0, r3
 8000568:	f003 ff18 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 800056c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fdeb 	bl	800014c <strlen>
 8000576:	4603      	mov	r3, r0
 8000578:	b29a      	uxth	r2, r3
 800057a:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 800057e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000582:	4856      	ldr	r0, [pc, #344]	; (80006dc <main+0x464>)
 8000584:	f003 f936 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | loff;
 8000588:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 800058c:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8000590:	4313      	orrs	r3, r2
 8000592:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 8000596:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 800059a:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fdf3 	bl	800018c <rreg_command>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c4[] = "LOFF is : ";
 80005ac:	4a50      	ldr	r2, [pc, #320]	; (80006f0 <main+0x478>)
 80005ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80005b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005b4:	c303      	stmia	r3!, {r0, r1}
 80005b6:	801a      	strh	r2, [r3, #0]
 80005b8:	3302      	adds	r3, #2
 80005ba:	0c12      	lsrs	r2, r2, #16
 80005bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, c4, sizeof(c4) - 1, 0x1000); // -1 to exclude null terminator
 80005be:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	220a      	movs	r2, #10
 80005c8:	4844      	ldr	r0, [pc, #272]	; (80006dc <main+0x464>)
 80005ca:	f003 f913 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 80005ce:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80005d2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80005d6:	4942      	ldr	r1, [pc, #264]	; (80006e0 <main+0x468>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fedf 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 80005de:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdb2 	bl	800014c <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	4839      	ldr	r0, [pc, #228]	; (80006dc <main+0x464>)
 80005f6:	f003 f8fd 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | ch1set;
 80005fa:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80005fe:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8000602:	4313      	orrs	r3, r2
 8000604:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 8000608:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 800060c:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fdba 	bl	800018c <rreg_command>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c5[] = "Channel 1 Register is : ";
 800061e:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <main+0x47c>)
 8000620:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	c403      	stmia	r4!, {r0, r1}
 8000630:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, c5, sizeof(c5) - 1, 0x1000); // -1 to exclude null terminator
 8000632:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	2218      	movs	r2, #24
 800063c:	4827      	ldr	r0, [pc, #156]	; (80006dc <main+0x464>)
 800063e:	f003 f8d9 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000642:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000646:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800064a:	4925      	ldr	r1, [pc, #148]	; (80006e0 <main+0x468>)
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fea5 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000652:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fd78 	bl	800014c <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	481c      	ldr	r0, [pc, #112]	; (80006dc <main+0x464>)
 800066a:	f003 f8c3 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | bias_sensp;
 800066e:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000672:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8000676:	4313      	orrs	r3, r2
 8000678:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 800067c:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000680:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fd80 	bl	800018c <rreg_command>
 800068c:	4603      	mov	r3, r0
 800068e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c6[] = "Bias_sensep is : ";
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <main+0x480>)
 8000694:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8000698:	461d      	mov	r5, r3
 800069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069e:	682b      	ldr	r3, [r5, #0]
 80006a0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c6, sizeof(c6) - 1, 0x1000); // -1 to exclude null terminator
 80006a2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	2211      	movs	r2, #17
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <main+0x464>)
 80006ae:	f003 f8a1 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 80006b2:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80006b6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80006ba:	4909      	ldr	r1, [pc, #36]	; (80006e0 <main+0x468>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fe6d 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 80006c2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fd40 	bl	800014c <strlen>
 80006cc:	e016      	b.n	80006fc <main+0x484>
 80006ce:	bf00      	nop
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	20000078 	.word	0x20000078
 80006d8:	08004d28 	.word	0x08004d28
 80006dc:	200000d0 	.word	0x200000d0
 80006e0:	08004d18 	.word	0x08004d18
 80006e4:	08004d38 	.word	0x08004d38
 80006e8:	08004d48 	.word	0x08004d48
 80006ec:	08004d58 	.word	0x08004d58
 80006f0:	08004d68 	.word	0x08004d68
 80006f4:	08004d74 	.word	0x08004d74
 80006f8:	08004d90 	.word	0x08004d90
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	48de      	ldr	r0, [pc, #888]	; (8000a84 <main+0x80c>)
 800070a:	f003 f873 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | bias_sensn;
 800070e:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000712:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8000716:	4313      	orrs	r3, r2
 8000718:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 800071c:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000720:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd30 	bl	800018c <rreg_command>
 800072c:	4603      	mov	r3, r0
 800072e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c7[] = "Bias_sensen is : ";
 8000732:	4bd5      	ldr	r3, [pc, #852]	; (8000a88 <main+0x810>)
 8000734:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8000738:	461d      	mov	r5, r3
 800073a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	682b      	ldr	r3, [r5, #0]
 8000740:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c7, sizeof(c7) - 1, 0x1000); // -1 to exclude null terminator
 8000742:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	2211      	movs	r2, #17
 800074c:	48cd      	ldr	r0, [pc, #820]	; (8000a84 <main+0x80c>)
 800074e:	f003 f851 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000752:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000756:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800075a:	49cc      	ldr	r1, [pc, #816]	; (8000a8c <main+0x814>)
 800075c:	4618      	mov	r0, r3
 800075e:	f003 fe1d 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000762:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fcf0 	bl	800014c <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	48c2      	ldr	r0, [pc, #776]	; (8000a84 <main+0x80c>)
 800077a:	f003 f83b 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 |loff_sensp;
 800077e:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000782:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8000786:	4313      	orrs	r3, r2
 8000788:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 800078c:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000790:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fcf8 	bl	800018c <rreg_command>
 800079c:	4603      	mov	r3, r0
 800079e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c8[] = "loff_sensep is : ";
 80007a2:	4bbb      	ldr	r3, [pc, #748]	; (8000a90 <main+0x818>)
 80007a4:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 80007a8:	461d      	mov	r5, r3
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ae:	682b      	ldr	r3, [r5, #0]
 80007b0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c8, sizeof(c8) - 1, 0x1000); // -1 to exclude null terminator
 80007b2:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	2211      	movs	r2, #17
 80007bc:	48b1      	ldr	r0, [pc, #708]	; (8000a84 <main+0x80c>)
 80007be:	f003 f819 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 80007c2:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80007c6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80007ca:	49b0      	ldr	r1, [pc, #704]	; (8000a8c <main+0x814>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fde5 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 80007d2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fcb8 	bl	800014c <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	48a6      	ldr	r0, [pc, #664]	; (8000a84 <main+0x80c>)
 80007ea:	f003 f803 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | loff_sensn;
 80007ee:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80007f2:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 80007f6:	4313      	orrs	r3, r2
 80007f8:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 80007fc:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000800:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fcc0 	bl	800018c <rreg_command>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c9[] = "loff_sensen is : ";
 8000812:	4ba0      	ldr	r3, [pc, #640]	; (8000a94 <main+0x81c>)
 8000814:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000818:	461d      	mov	r5, r3
 800081a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081e:	682b      	ldr	r3, [r5, #0]
 8000820:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c9, sizeof(c9) - 1, 0x1000); // -1 to exclude null terminator
 8000822:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	2211      	movs	r2, #17
 800082c:	4895      	ldr	r0, [pc, #596]	; (8000a84 <main+0x80c>)
 800082e:	f002 ffe1 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000832:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000836:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800083a:	4994      	ldr	r1, [pc, #592]	; (8000a8c <main+0x814>)
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fdad 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000842:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fc80 	bl	800014c <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	488a      	ldr	r0, [pc, #552]	; (8000a84 <main+0x80c>)
 800085a:	f002 ffcb 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | loff_flip;
 800085e:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000862:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8000866:	4313      	orrs	r3, r2
 8000868:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 800086c:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000870:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc88 	bl	800018c <rreg_command>
 800087c:	4603      	mov	r3, r0
 800087e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c10[] = "loff_flip is : ";
 8000882:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000886:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800088a:	4a83      	ldr	r2, [pc, #524]	; (8000a98 <main+0x820>)
 800088c:	461c      	mov	r4, r3
 800088e:	4613      	mov	r3, r2
 8000890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart2, c10, sizeof(c10) - 1, 0x1000); // -1 to exclude null terminator
 8000896:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	220f      	movs	r2, #15
 80008a0:	4878      	ldr	r0, [pc, #480]	; (8000a84 <main+0x80c>)
 80008a2:	f002 ffa7 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 80008a6:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80008aa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80008ae:	4977      	ldr	r1, [pc, #476]	; (8000a8c <main+0x814>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fd73 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 80008b6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fc46 	bl	800014c <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	486d      	ldr	r0, [pc, #436]	; (8000a84 <main+0x80c>)
 80008ce:	f002 ff91 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | loff_statp;
 80008d2:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80008d6:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80008da:	4313      	orrs	r3, r2
 80008dc:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 80008e0:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 80008e4:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fc4e 	bl	800018c <rreg_command>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c11[] = "loff_statp is : ";
 80008f6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80008fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80008fe:	4a67      	ldr	r2, [pc, #412]	; (8000a9c <main+0x824>)
 8000900:	461c      	mov	r4, r3
 8000902:	4615      	mov	r5, r2
 8000904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000908:	682b      	ldr	r3, [r5, #0]
 800090a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c11, sizeof(c11) - 1, 0x1000); // -1 to exclude null terminator
 800090c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	2210      	movs	r2, #16
 8000916:	485b      	ldr	r0, [pc, #364]	; (8000a84 <main+0x80c>)
 8000918:	f002 ff6c 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 800091c:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000920:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000924:	4959      	ldr	r1, [pc, #356]	; (8000a8c <main+0x814>)
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fd38 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 800092c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fc0b 	bl	800014c <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	b29a      	uxth	r2, r3
 800093a:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	4850      	ldr	r0, [pc, #320]	; (8000a84 <main+0x80c>)
 8000944:	f002 ff56 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | loff_statn;
 8000948:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 800094c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8000950:	4313      	orrs	r3, r2
 8000952:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 8000956:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 800095a:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fc13 	bl	800018c <rreg_command>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c12[] = "loff_statn is : ";
 800096c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000970:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000974:	4a4a      	ldr	r2, [pc, #296]	; (8000aa0 <main+0x828>)
 8000976:	461c      	mov	r4, r3
 8000978:	4615      	mov	r5, r2
 800097a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c12, sizeof(c12) - 1, 0x1000); // -1 to exclude null terminator
 8000982:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	2210      	movs	r2, #16
 800098c:	483d      	ldr	r0, [pc, #244]	; (8000a84 <main+0x80c>)
 800098e:	f002 ff31 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000992:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000996:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800099a:	493c      	ldr	r1, [pc, #240]	; (8000a8c <main+0x814>)
 800099c:	4618      	mov	r0, r3
 800099e:	f003 fcfd 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 80009a2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fbd0 	bl	800014c <strlen>
 80009ac:	4603      	mov	r3, r0
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	4832      	ldr	r0, [pc, #200]	; (8000a84 <main+0x80c>)
 80009ba:	f002 ff1b 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | gpio;
 80009be:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80009c2:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80009c6:	4313      	orrs	r3, r2
 80009c8:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 80009cc:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 80009d0:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fbd8 	bl	800018c <rreg_command>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c13[] = "gpio is : ";
 80009e2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80009e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80009ea:	4a2e      	ldr	r2, [pc, #184]	; (8000aa4 <main+0x82c>)
 80009ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ee:	c303      	stmia	r3!, {r0, r1}
 80009f0:	801a      	strh	r2, [r3, #0]
 80009f2:	3302      	adds	r3, #2
 80009f4:	0c12      	lsrs	r2, r2, #16
 80009f6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, c13, sizeof(c13) - 1, 0x1000); // -1 to exclude null terminator
 80009f8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	220a      	movs	r2, #10
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <main+0x80c>)
 8000a04:	f002 fef6 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000a08:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000a0c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000a10:	491e      	ldr	r1, [pc, #120]	; (8000a8c <main+0x814>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fcc2 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000a18:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fb95 	bl	800014c <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	4815      	ldr	r0, [pc, #84]	; (8000a84 <main+0x80c>)
 8000a30:	f002 fee0 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | misc1;
 8000a34:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000a38:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 8000a42:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000a46:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fb9d 	bl	800018c <rreg_command>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c14[] = "misc1 is : ";
 8000a58:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000a5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <main+0x830>)
 8000a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, c14, sizeof(c14) - 1, 0x1000); // -1 to exclude null terminator
 8000a68:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	220b      	movs	r2, #11
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <main+0x80c>)
 8000a74:	f002 febe 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000a78:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000a7c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000a80:	e014      	b.n	8000aac <main+0x834>
 8000a82:	bf00      	nop
 8000a84:	200000d0 	.word	0x200000d0
 8000a88:	08004da4 	.word	0x08004da4
 8000a8c:	08004d18 	.word	0x08004d18
 8000a90:	08004db8 	.word	0x08004db8
 8000a94:	08004dcc 	.word	0x08004dcc
 8000a98:	08004de0 	.word	0x08004de0
 8000a9c:	08004df0 	.word	0x08004df0
 8000aa0:	08004e04 	.word	0x08004e04
 8000aa4:	08004e18 	.word	0x08004e18
 8000aa8:	08004e24 	.word	0x08004e24
 8000aac:	49ec      	ldr	r1, [pc, #944]	; (8000e60 <main+0xbe8>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 fc74 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000ab4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fb47 	bl	800014c <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aca:	48e6      	ldr	r0, [pc, #920]	; (8000e64 <main+0xbec>)
 8000acc:	f002 fe92 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | misc2;
 8000ad0:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000ad4:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 8000ade:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000ae2:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fb4f 	bl	800018c <rreg_command>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c15[] = "misc2 is : ";
 8000af4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000af8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000afc:	4ada      	ldr	r2, [pc, #872]	; (8000e68 <main+0xbf0>)
 8000afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, c15, sizeof(c15) - 1, 0x1000); // -1 to exclude null terminator
 8000b04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	220b      	movs	r2, #11
 8000b0e:	48d5      	ldr	r0, [pc, #852]	; (8000e64 <main+0xbec>)
 8000b10:	f002 fe70 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000b14:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000b18:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000b1c:	49d0      	ldr	r1, [pc, #832]	; (8000e60 <main+0xbe8>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 fc3c 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000b24:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fb0f 	bl	800014c <strlen>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	48ca      	ldr	r0, [pc, #808]	; (8000e64 <main+0xbec>)
 8000b3c:	f002 fe5a 	bl	80037f4 <HAL_UART_Transmit>

	buffer1 = buf1 | config4;
 8000b40:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000b44:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	read_byte = rreg_command(buffer1, buffer2);
 8000b4e:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000b52:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fb17 	bl	800018c <rreg_command>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t c16[] = "config4 is : ";
 8000b64:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000b68:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000b6c:	4abf      	ldr	r2, [pc, #764]	; (8000e6c <main+0xbf4>)
 8000b6e:	461c      	mov	r4, r3
 8000b70:	4613      	mov	r3, r2
 8000b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b74:	c407      	stmia	r4!, {r0, r1, r2}
 8000b76:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, c16, sizeof(c16) - 1, 0x1000); // -1 to exclude null terminator
 8000b78:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b80:	220d      	movs	r2, #13
 8000b82:	48b8      	ldr	r0, [pc, #736]	; (8000e64 <main+0xbec>)
 8000b84:	f002 fe36 	bl	80037f4 <HAL_UART_Transmit>
	sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000b88:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000b8c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000b90:	49b3      	ldr	r1, [pc, #716]	; (8000e60 <main+0xbe8>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fc02 	bl	800439c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000b98:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fad5 	bl	800014c <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bae:	48ad      	ldr	r0, [pc, #692]	; (8000e64 <main+0xbec>)
 8000bb0:	f002 fe20 	bl	80037f4 <HAL_UART_Transmit>

//	HAL_Delay(1000);
  delay_try(100);
 8000bb4:	2064      	movs	r0, #100	; 0x64
 8000bb6:	f7ff fad1 	bl	800015c <delay_try>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	wrreg_command(config1, 0xD5); //D5
 8000bba:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000bbe:	21d5      	movs	r1, #213	; 0xd5
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb1d 	bl	8000200 <wrreg_command>
	wrreg_command(config2, 0xC0);// D1
 8000bc6:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8000bca:	21c0      	movs	r1, #192	; 0xc0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fb17 	bl	8000200 <wrreg_command>
	wrreg_command(config3, 0xEF);// E4, E0, E6
 8000bd2:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8000bd6:	21ef      	movs	r1, #239	; 0xef
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fb11 	bl	8000200 <wrreg_command>
	wrreg_command(loff, 0x00);//80
 8000bde:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fb0b 	bl	8000200 <wrreg_command>
	wrreg_command(ch1set, 0x00);//55
 8000bea:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fb05 	bl	8000200 <wrreg_command>
	wrreg_command(ch2set, 0x00);
 8000bf6:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff faff 	bl	8000200 <wrreg_command>
	wrreg_command(ch3set, 0x00);
 8000c02:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff faf9 	bl	8000200 <wrreg_command>
	wrreg_command(ch4set, 0x00);
 8000c0e:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff faf3 	bl	8000200 <wrreg_command>
	wrreg_command(ch5set, 0x00);
 8000c1a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff faed 	bl	8000200 <wrreg_command>
	wrreg_command(ch6set, 0x00);
 8000c26:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fae7 	bl	8000200 <wrreg_command>
	wrreg_command(ch7set, 0x00);
 8000c32:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fae1 	bl	8000200 <wrreg_command>
	wrreg_command(ch8set, 0x00);
 8000c3e:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fadb 	bl	8000200 <wrreg_command>
	wrreg_command(bias_sensp, 0x00);//FF
 8000c4a:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fad5 	bl	8000200 <wrreg_command>
	wrreg_command(bias_sensn, 0x00);//FF
 8000c56:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff facf 	bl	8000200 <wrreg_command>
	wrreg_command(loff_sensp, 0x00);//FF
 8000c62:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fac9 	bl	8000200 <wrreg_command>
	wrreg_command(loff_sensn, 0x00);//FF
 8000c6e:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fac3 	bl	8000200 <wrreg_command>
	wrreg_command(loff_flip, 0x00);
 8000c7a:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fabd 	bl	8000200 <wrreg_command>
	wrreg_command(gpio, 0x0F); //00, FF, F0
 8000c86:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fab7 	bl	8000200 <wrreg_command>
	wrreg_command(misc1, 0x20);
 8000c92:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8000c96:	2120      	movs	r1, #32
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fab1 	bl	8000200 <wrreg_command>
	wrreg_command(misc2, 0x00);
 8000c9e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff faab 	bl	8000200 <wrreg_command>
	wrreg_command(config4, 0x02); //00
 8000caa:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff faa5 	bl	8000200 <wrreg_command>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  read_byte = rreg_command(buffer1, buffer2);

		buffer1 = buf1 | 0x00;
 8000cb6:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8000cba:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	    read_byte = rreg_command(buffer1, buffer2);
 8000cbe:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000cc2:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fa5f 	bl	800018c <rreg_command>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//	    uint8_t dev_id[] = "Device Id is : ";
	    HAL_UART_Transmit(&huart2, dev_id, sizeof(dev_id) - 1, 0x1000); // -1 to exclude null terminator
 8000cd4:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	220f      	movs	r2, #15
 8000cde:	4861      	ldr	r0, [pc, #388]	; (8000e64 <main+0xbec>)
 8000ce0:	f002 fd88 	bl	80037f4 <HAL_UART_Transmit>
//	     char ads[16];
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000ce4:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000ce8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000cec:	495c      	ldr	r1, [pc, #368]	; (8000e60 <main+0xbe8>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 fb54 	bl	800439c <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000cf4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa27 	bl	800014c <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0a:	4856      	ldr	r0, [pc, #344]	; (8000e64 <main+0xbec>)
 8000d0c:	f002 fd72 	bl	80037f4 <HAL_UART_Transmit>

	    buffer1 = buf1 | config1;
 8000d10:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000d14:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	    read_byte = rreg_command(buffer1, buffer2);
 8000d1e:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000d22:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fa2f 	bl	800018c <rreg_command>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//	    uint8_t c1[] = "Config1 is : ";
	    HAL_UART_Transmit(&huart2, c1, sizeof(c1) - 1, 0x1000); // -1 to exclude null terminator
 8000d34:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	220d      	movs	r2, #13
 8000d3e:	4849      	ldr	r0, [pc, #292]	; (8000e64 <main+0xbec>)
 8000d40:	f002 fd58 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000d44:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000d48:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000d4c:	4944      	ldr	r1, [pc, #272]	; (8000e60 <main+0xbe8>)
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fb24 	bl	800439c <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000d54:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff f9f7 	bl	800014c <strlen>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	483e      	ldr	r0, [pc, #248]	; (8000e64 <main+0xbec>)
 8000d6c:	f002 fd42 	bl	80037f4 <HAL_UART_Transmit>

	    buffer1 = buf1 | config2;
 8000d70:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000d74:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	    read_byte = rreg_command(buffer1, buffer2);
 8000d7e:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000d82:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff f9ff 	bl	800018c <rreg_command>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c2[] = "Config2 is : ";
		HAL_UART_Transmit(&huart2, c2, sizeof(c2) - 1, 0x1000); // -1 to exclude null terminator
 8000d94:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8000d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9c:	220d      	movs	r2, #13
 8000d9e:	4831      	ldr	r0, [pc, #196]	; (8000e64 <main+0xbec>)
 8000da0:	f002 fd28 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000da4:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000da8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000dac:	492c      	ldr	r1, [pc, #176]	; (8000e60 <main+0xbe8>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 faf4 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000db4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff f9c7 	bl	800014c <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	4826      	ldr	r0, [pc, #152]	; (8000e64 <main+0xbec>)
 8000dcc:	f002 fd12 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | config3;
 8000dd0:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000dd4:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8000dde:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000de2:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff f9cf 	bl	800018c <rreg_command>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c3[] = "Config3 is : ";
		HAL_UART_Transmit(&huart2, c3, sizeof(c3) - 1, 0x1000); // -1 to exclude null terminator
 8000df4:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	220d      	movs	r2, #13
 8000dfe:	4819      	ldr	r0, [pc, #100]	; (8000e64 <main+0xbec>)
 8000e00:	f002 fcf8 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000e04:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000e08:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e0c:	4914      	ldr	r1, [pc, #80]	; (8000e60 <main+0xbe8>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fac4 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000e14:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f997 	bl	800014c <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <main+0xbec>)
 8000e2c:	f002 fce2 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | loff;
 8000e30:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000e34:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8000e3e:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000e42:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff f99f 	bl	800018c <rreg_command>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c4[] = "LOFF is : ";
		HAL_UART_Transmit(&huart2, c4, sizeof(c4) - 1, 0x1000); // -1 to exclude null terminator
 8000e54:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5c:	220a      	movs	r2, #10
 8000e5e:	e007      	b.n	8000e70 <main+0xbf8>
 8000e60:	08004d18 	.word	0x08004d18
 8000e64:	200000d0 	.word	0x200000d0
 8000e68:	08004e30 	.word	0x08004e30
 8000e6c:	08004e3c 	.word	0x08004e3c
 8000e70:	48ea      	ldr	r0, [pc, #936]	; (800121c <main+0xfa4>)
 8000e72:	f002 fcbf 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000e76:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000e7a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e7e:	49e8      	ldr	r1, [pc, #928]	; (8001220 <main+0xfa8>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fa8b 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000e86:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f95e 	bl	800014c <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	48df      	ldr	r0, [pc, #892]	; (800121c <main+0xfa4>)
 8000e9e:	f002 fca9 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | ch1set;
 8000ea2:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000ea6:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8000eb0:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000eb4:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f966 	bl	800018c <rreg_command>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c5[] = "Channel 1 Register is : ";
		HAL_UART_Transmit(&huart2, c5, sizeof(c5) - 1, 0x1000); // -1 to exclude null terminator
 8000ec6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8000eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ece:	2218      	movs	r2, #24
 8000ed0:	48d2      	ldr	r0, [pc, #840]	; (800121c <main+0xfa4>)
 8000ed2:	f002 fc8f 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000ed6:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000eda:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000ede:	49d0      	ldr	r1, [pc, #832]	; (8001220 <main+0xfa8>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fa5b 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000ee6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff f92e 	bl	800014c <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	48c7      	ldr	r0, [pc, #796]	; (800121c <main+0xfa4>)
 8000efe:	f002 fc79 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | bias_sensp;
 8000f02:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000f06:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8000f10:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000f14:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff f936 	bl	800018c <rreg_command>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c6[] = "Bias_sensep is : ";
		HAL_UART_Transmit(&huart2, c6, sizeof(c6) - 1, 0x1000); // -1 to exclude null terminator
 8000f26:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	2211      	movs	r2, #17
 8000f30:	48ba      	ldr	r0, [pc, #744]	; (800121c <main+0xfa4>)
 8000f32:	f002 fc5f 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000f36:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000f3a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000f3e:	49b8      	ldr	r1, [pc, #736]	; (8001220 <main+0xfa8>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fa2b 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000f46:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f8fe 	bl	800014c <strlen>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	48af      	ldr	r0, [pc, #700]	; (800121c <main+0xfa4>)
 8000f5e:	f002 fc49 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | bias_sensn;
 8000f62:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000f66:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8000f70:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000f74:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f906 	bl	800018c <rreg_command>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c7[] = "Bias_sensen is : ";
		HAL_UART_Transmit(&huart2, c7, sizeof(c7) - 1, 0x1000); // -1 to exclude null terminator
 8000f86:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	2211      	movs	r2, #17
 8000f90:	48a2      	ldr	r0, [pc, #648]	; (800121c <main+0xfa4>)
 8000f92:	f002 fc2f 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000f96:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000f9a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000f9e:	49a0      	ldr	r1, [pc, #640]	; (8001220 <main+0xfa8>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 f9fb 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8000fa6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f8ce 	bl	800014c <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbc:	4897      	ldr	r0, [pc, #604]	; (800121c <main+0xfa4>)
 8000fbe:	f002 fc19 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 |loff_sensp;
 8000fc2:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8000fc6:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8000fd0:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8000fd4:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f8d6 	bl	800018c <rreg_command>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c8[] = "loff_sensep is : ";
		HAL_UART_Transmit(&huart2, c8, sizeof(c8) - 1, 0x1000); // -1 to exclude null terminator
 8000fe6:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	2211      	movs	r2, #17
 8000ff0:	488a      	ldr	r0, [pc, #552]	; (800121c <main+0xfa4>)
 8000ff2:	f002 fbff 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8000ff6:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000ffa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000ffe:	4988      	ldr	r1, [pc, #544]	; (8001220 <main+0xfa8>)
 8001000:	4618      	mov	r0, r3
 8001002:	f003 f9cb 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8001006:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff f89e 	bl	800014c <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	487f      	ldr	r0, [pc, #508]	; (800121c <main+0xfa4>)
 800101e:	f002 fbe9 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | loff_sensn;
 8001022:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8001026:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800102a:	4313      	orrs	r3, r2
 800102c:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8001030:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8001034:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f8a6 	bl	800018c <rreg_command>
 8001040:	4603      	mov	r3, r0
 8001042:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c9[] = "loff_sensen is : ";
		HAL_UART_Transmit(&huart2, c9, sizeof(c9) - 1, 0x1000); // -1 to exclude null terminator
 8001046:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	2211      	movs	r2, #17
 8001050:	4872      	ldr	r0, [pc, #456]	; (800121c <main+0xfa4>)
 8001052:	f002 fbcf 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8001056:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 800105a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800105e:	4970      	ldr	r1, [pc, #448]	; (8001220 <main+0xfa8>)
 8001060:	4618      	mov	r0, r3
 8001062:	f003 f99b 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8001066:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f86e 	bl	800014c <strlen>
 8001070:	4603      	mov	r3, r0
 8001072:	b29a      	uxth	r2, r3
 8001074:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	4867      	ldr	r0, [pc, #412]	; (800121c <main+0xfa4>)
 800107e:	f002 fbb9 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | loff_flip;
 8001082:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8001086:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800108a:	4313      	orrs	r3, r2
 800108c:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8001090:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8001094:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f876 	bl	800018c <rreg_command>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c10[] = "loff_flip is : ";
		HAL_UART_Transmit(&huart2, c10, sizeof(c10) - 1, 0x1000); // -1 to exclude null terminator
 80010a6:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80010aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ae:	220f      	movs	r2, #15
 80010b0:	485a      	ldr	r0, [pc, #360]	; (800121c <main+0xfa4>)
 80010b2:	f002 fb9f 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 80010b6:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80010ba:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80010be:	4958      	ldr	r1, [pc, #352]	; (8001220 <main+0xfa8>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 f96b 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 80010c6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f83e 	bl	800014c <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	484f      	ldr	r0, [pc, #316]	; (800121c <main+0xfa4>)
 80010de:	f002 fb89 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | loff_statp;
 80010e2:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80010e6:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80010ea:	4313      	orrs	r3, r2
 80010ec:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 80010f0:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 80010f4:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f846 	bl	800018c <rreg_command>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c11[] = "loff_statp is : ";
		HAL_UART_Transmit(&huart2, c11, sizeof(c11) - 1, 0x1000); // -1 to exclude null terminator
 8001106:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	2210      	movs	r2, #16
 8001110:	4842      	ldr	r0, [pc, #264]	; (800121c <main+0xfa4>)
 8001112:	f002 fb6f 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8001116:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 800111a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800111e:	4940      	ldr	r1, [pc, #256]	; (8001220 <main+0xfa8>)
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f93b 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8001126:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f80e 	bl	800014c <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	b29a      	uxth	r2, r3
 8001134:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	4837      	ldr	r0, [pc, #220]	; (800121c <main+0xfa4>)
 800113e:	f002 fb59 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | loff_statn;
 8001142:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8001146:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800114a:	4313      	orrs	r3, r2
 800114c:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8001150:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8001154:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f816 	bl	800018c <rreg_command>
 8001160:	4603      	mov	r3, r0
 8001162:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c12[] = "loff_statn is : ";
		HAL_UART_Transmit(&huart2, c12, sizeof(c12) - 1, 0x1000); // -1 to exclude null terminator
 8001166:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	2210      	movs	r2, #16
 8001170:	482a      	ldr	r0, [pc, #168]	; (800121c <main+0xfa4>)
 8001172:	f002 fb3f 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8001176:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 800117a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800117e:	4928      	ldr	r1, [pc, #160]	; (8001220 <main+0xfa8>)
 8001180:	4618      	mov	r0, r3
 8001182:	f003 f90b 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8001186:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800118a:	4618      	mov	r0, r3
 800118c:	f7fe ffde 	bl	800014c <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <main+0xfa4>)
 800119e:	f002 fb29 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | gpio;
 80011a2:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80011a6:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80011aa:	4313      	orrs	r3, r2
 80011ac:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 80011b0:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 80011b4:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7fe ffe6 	bl	800018c <rreg_command>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c13[] = "gpio is : ";
		HAL_UART_Transmit(&huart2, c13, sizeof(c13) - 1, 0x1000); // -1 to exclude null terminator
 80011c6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	220a      	movs	r2, #10
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <main+0xfa4>)
 80011d2:	f002 fb0f 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 80011d6:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80011da:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80011de:	4910      	ldr	r1, [pc, #64]	; (8001220 <main+0xfa8>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 f8db 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 80011e6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7fe ffae 	bl	800014c <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <main+0xfa4>)
 80011fe:	f002 faf9 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | misc1;
 8001202:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8001206:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 800120a:	4313      	orrs	r3, r2
 800120c:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 8001210:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8001214:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8001218:	e004      	b.n	8001224 <main+0xfac>
 800121a:	bf00      	nop
 800121c:	200000d0 	.word	0x200000d0
 8001220:	08004d18 	.word	0x08004d18
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7fe ffb0 	bl	800018c <rreg_command>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c14[] = "misc1 is : ";
		HAL_UART_Transmit(&huart2, c14, sizeof(c14) - 1, 0x1000); // -1 to exclude null terminator
 8001232:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	220b      	movs	r2, #11
 800123c:	48a3      	ldr	r0, [pc, #652]	; (80014cc <main+0x1254>)
 800123e:	f002 fad9 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8001242:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001246:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800124a:	49a1      	ldr	r1, [pc, #644]	; (80014d0 <main+0x1258>)
 800124c:	4618      	mov	r0, r3
 800124e:	f003 f8a5 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8001252:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ff78 	bl	800014c <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	4898      	ldr	r0, [pc, #608]	; (80014cc <main+0x1254>)
 800126a:	f002 fac3 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | misc2;
 800126e:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8001272:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001276:	4313      	orrs	r3, r2
 8001278:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 800127c:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 8001280:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ff80 	bl	800018c <rreg_command>
 800128c:	4603      	mov	r3, r0
 800128e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c15[] = "misc2 is : ";
		HAL_UART_Transmit(&huart2, c15, sizeof(c15) - 1, 0x1000); // -1 to exclude null terminator
 8001292:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	220b      	movs	r2, #11
 800129c:	488b      	ldr	r0, [pc, #556]	; (80014cc <main+0x1254>)
 800129e:	f002 faa9 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 80012a2:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80012a6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80012aa:	4989      	ldr	r1, [pc, #548]	; (80014d0 <main+0x1258>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 f875 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 80012b2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7fe ff48 	bl	800014c <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	4880      	ldr	r0, [pc, #512]	; (80014cc <main+0x1254>)
 80012ca:	f002 fa93 	bl	80037f4 <HAL_UART_Transmit>

		buffer1 = buf1 | config4;
 80012ce:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80012d2:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80012d6:	4313      	orrs	r3, r2
 80012d8:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
		read_byte = rreg_command(buffer1, buffer2);
 80012dc:	f897 2190 	ldrb.w	r2, [r7, #400]	; 0x190
 80012e0:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff50 	bl	800018c <rreg_command>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
//		uint8_t c16[] = "config4 is : ";
		HAL_UART_Transmit(&huart2, c16, sizeof(c16) - 1, 0x1000); // -1 to exclude null terminator
 80012f2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80012f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fa:	220d      	movs	r2, #13
 80012fc:	4873      	ldr	r0, [pc, #460]	; (80014cc <main+0x1254>)
 80012fe:	f002 fa79 	bl	80037f4 <HAL_UART_Transmit>
		sprintf(ads, "%u\r\n", read_byte); // Dereference the pointer to get the value
 8001302:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001306:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800130a:	4971      	ldr	r1, [pc, #452]	; (80014d0 <main+0x1258>)
 800130c:	4618      	mov	r0, r3
 800130e:	f003 f845 	bl	800439c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ads, strlen(ads), 0x1000);
 8001312:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ff18 	bl	800014c <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	4868      	ldr	r0, [pc, #416]	; (80014cc <main+0x1254>)
 800132a:	f002 fa63 	bl	80037f4 <HAL_UART_Transmit>


  delay_try(10);
 800132e:	200a      	movs	r0, #10
 8001330:	f7fe ff14 	bl	800015c <delay_try>

//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
  delay_try(4);
 8001334:	2004      	movs	r0, #4
 8001336:	f7fe ff11 	bl	800015c <delay_try>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	4865      	ldr	r0, [pc, #404]	; (80014d4 <main+0x125c>)
 8001340:	f000 ff39 	bl	80021b6 <HAL_GPIO_WritePin>
  delay_try(4);
 8001344:	2004      	movs	r0, #4
 8001346:	f7fe ff09 	bl	800015c <delay_try>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001350:	4861      	ldr	r0, [pc, #388]	; (80014d8 <main+0x1260>)
 8001352:	f000 ff30 	bl	80021b6 <HAL_GPIO_WritePin>
//  HAL_SPI_Transmit(&hspi1, (uint8_t *)& , 1, 0x1000);
  delay_try(100);
 8001356:	2064      	movs	r0, #100	; 0x64
 8001358:	f7fe ff00 	bl	800015c <delay_try>

  //send RDATAC command
//  delay_us(4);
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&rdatac, 1, 0x1000);
 800135c:	f207 1175 	addw	r1, r7, #373	; 0x175
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	2201      	movs	r2, #1
 8001366:	485d      	ldr	r0, [pc, #372]	; (80014dc <main+0x1264>)
 8001368:	f001 fbf4 	bl	8002b54 <HAL_SPI_Transmit>
  delay_try(4);
 800136c:	2004      	movs	r0, #4
 800136e:	f7fe fef5 	bl	800015c <delay_try>

//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
//  uint32_t read_dat;
//  while(1){

  uint8_t suc[] = "success";
 8001372:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001376:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800137a:	4a59      	ldr	r2, [pc, #356]	; (80014e0 <main+0x1268>)
 800137c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001380:	e883 0003 	stmia.w	r3, {r0, r1}
  	uint32_t status_reg;
	uint8_t inbyte=0x00;
 8001384:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001388:	f2a3 1371 	subw	r3, r3, #369	; 0x171
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	status_reg = 0x00000000;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	uint32_t output[8];
	uint32_t dataPacket = 0x00000000;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint8_t dataByte;
//	uint8_t chan[] = "Channel:";
  while(1){
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 800139c:	2110      	movs	r1, #16
 800139e:	484d      	ldr	r0, [pc, #308]	; (80014d4 <main+0x125c>)
 80013a0:	f000 fef2 	bl	8002188 <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f8      	bne.n	800139c <main+0x1124>
		  //HAL_UART_Transmit(&huart2, suc, sizeof(suc) - 1, 0x1000);
		  for (int j = 0; j < 3; j++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013b0:	e017      	b.n	80013e2 <main+0x116a>
			HAL_SPI_Receive(&hspi1, (uint8_t*)&inbyte, 1, 0x1000); // Pass the address of inbyte
 80013b2:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	2201      	movs	r2, #1
 80013bc:	4847      	ldr	r0, [pc, #284]	; (80014dc <main+0x1264>)
 80013be:	f001 fd0c 	bl	8002dda <HAL_SPI_Receive>
			status_reg = (status_reg << 8) | inbyte;
 80013c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80013cc:	f2a2 1271 	subw	r2, r2, #369	; 0x171
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		  for (int j = 0; j < 3; j++) {
 80013d8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80013dc:	3301      	adds	r3, #1
 80013de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	dde3      	ble.n	80013b2 <main+0x113a>
		  }

		  for(int i = 0; i < 8; i++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80013f0:	e031      	b.n	8001456 <main+0x11de>
			for(int j = 0; j < 3; j++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80013f8:	e017      	b.n	800142a <main+0x11b2>
				HAL_SPI_Receive(&hspi1, (uint8_t*)&dataByte, 1, 0x1000); // Corrected variable name
 80013fa:	f107 0113 	add.w	r1, r7, #19
 80013fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001402:	2201      	movs	r2, #1
 8001404:	4835      	ldr	r0, [pc, #212]	; (80014dc <main+0x1264>)
 8001406:	f001 fce8 	bl	8002dda <HAL_SPI_Receive>
				dataPacket = (dataPacket << 8) | dataByte;
 800140a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8001414:	f2a2 1295 	subw	r2, r2, #405	; 0x195
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	4313      	orrs	r3, r2
 800141c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			for(int j = 0; j < 3; j++) {
 8001420:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001424:	3301      	adds	r3, #1
 8001426:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800142a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800142e:	2b02      	cmp	r3, #2
 8001430:	dde3      	ble.n	80013fa <main+0x1182>
			}
			output[i] = dataPacket;
 8001432:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001436:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800143a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800143e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8001442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			dataPacket = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		  for(int i = 0; i < 8; i++) {
 800144c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001450:	3301      	adds	r3, #1
 8001452:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001456:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800145a:	2b07      	cmp	r3, #7
 800145c:	ddc9      	ble.n	80013f2 <main+0x117a>
////		  				 printf("Channel : %s", ads_data);
//		  				 HAL_UART_Transmit(&huart2, (uint8_t*)ads_data, strlen(ads_data), 0x1000);
//
//		  			}
		  char ads_data[16];
		  	HAL_UART_Transmit(&huart2, suc, sizeof(suc) - 1, 0x1000);
 800145e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	2207      	movs	r2, #7
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <main+0x1254>)
 800146a:	f002 f9c3 	bl	80037f4 <HAL_UART_Transmit>

		  	sprintf(ads_data, "%lu\r\n", status_reg);
 800146e:	463b      	mov	r3, r7
 8001470:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001474:	491b      	ldr	r1, [pc, #108]	; (80014e4 <main+0x126c>)
 8001476:	4618      	mov	r0, r3
 8001478:	f002 ff90 	bl	800439c <siprintf>
		  //		  			printf("Status_reg: %s", ads_data);
		  	HAL_UART_Transmit(&huart2, (uint8_t*)ads_data, strlen(ads_data), 0x1000);
 800147c:	463b      	mov	r3, r7
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe fe64 	bl	800014c <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	4639      	mov	r1, r7
 800148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148e:	480f      	ldr	r0, [pc, #60]	; (80014cc <main+0x1254>)
 8001490:	f002 f9b0 	bl	80037f4 <HAL_UART_Transmit>
		  //	for(int i = 0; i < 8; i++) {
		  ////		HAL_UART_Transmit(&huart2, chan, sizeof(chan) - 1, 0x1000);

		  		 sprintf(ads_data, "%lu\r\n", output[4]);
 8001494:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001498:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	463b      	mov	r3, r7
 80014a0:	4910      	ldr	r1, [pc, #64]	; (80014e4 <main+0x126c>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 ff7a 	bl	800439c <siprintf>
		  //		  				 printf("Channel : %s", ads_data);
		  		 HAL_UART_Transmit(&huart2, (uint8_t*)ads_data, strlen(ads_data), 0x1000);
 80014a8:	463b      	mov	r3, r7
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe fe4e 	bl	800014c <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4639      	mov	r1, r7
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <main+0x1254>)
 80014bc:	f002 f99a 	bl	80037f4 <HAL_UART_Transmit>

		  //	}
		  	delay_try(10000);
 80014c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80014c4:	f7fe fe4a 	bl	800015c <delay_try>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 80014c8:	e768      	b.n	800139c <main+0x1124>
 80014ca:	bf00      	nop
 80014cc:	200000d0 	.word	0x200000d0
 80014d0:	08004d18 	.word	0x08004d18
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	40010800 	.word	0x40010800
 80014dc:	20000078 	.word	0x20000078
 80014e0:	08004e4c 	.word	0x08004e4c
 80014e4:	08004d20 	.word	0x08004d20

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	; 0x40
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	2228      	movs	r2, #40	; 0x28
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 ff70 	bl	80043dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001512:	2310      	movs	r3, #16
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800151a:	2300      	movs	r3, #0
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800151e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fe7f 	bl	800222c <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001534:	f000 f90c 	bl	8001750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001538:	230f      	movs	r3, #15
 800153a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153c:	2302      	movs	r3, #2
 800153e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f001 f8ed 	bl	8002730 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800155c:	f000 f8f8 	bl	8001750 <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3740      	adds	r7, #64	; 0x40
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_SPI1_Init+0x64>)
 800156e:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <MX_SPI1_Init+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_SPI1_Init+0x64>)
 8001574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_SPI1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_SPI1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_SPI1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_SPI1_Init+0x64>)
 800158e:	2201      	movs	r2, #1
 8001590:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_SPI1_Init+0x64>)
 8001594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001598:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_SPI1_Init+0x64>)
 800159c:	2218      	movs	r2, #24
 800159e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_SPI1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_SPI1_Init+0x64>)
 80015b4:	220a      	movs	r2, #10
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_SPI1_Init+0x64>)
 80015ba:	f001 fa47 	bl	8002a4c <HAL_SPI_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015c4:	f000 f8c4 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000078 	.word	0x20000078
 80015d0:	40013000 	.word	0x40013000

080015d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_USART2_UART_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 800160c:	f002 f8a2 	bl	8003754 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001616:	f000 f89b 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000d0 	.word	0x200000d0
 8001624:	40004400 	.word	0x40004400

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <MX_GPIO_Init+0x114>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a3e      	ldr	r2, [pc, #248]	; (800173c <MX_GPIO_Init+0x114>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <MX_GPIO_Init+0x114>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <MX_GPIO_Init+0x114>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a38      	ldr	r2, [pc, #224]	; (800173c <MX_GPIO_Init+0x114>)
 800165a:	f043 0320 	orr.w	r3, r3, #32
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <MX_GPIO_Init+0x114>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <MX_GPIO_Init+0x114>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a32      	ldr	r2, [pc, #200]	; (800173c <MX_GPIO_Init+0x114>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <MX_GPIO_Init+0x114>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <MX_GPIO_Init+0x114>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a2c      	ldr	r2, [pc, #176]	; (800173c <MX_GPIO_Init+0x114>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <MX_GPIO_Init+0x114>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80016a2:	4827      	ldr	r0, [pc, #156]	; (8001740 <MX_GPIO_Init+0x118>)
 80016a4:	f000 fd87 	bl	80021b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ae:	4825      	ldr	r0, [pc, #148]	; (8001744 <MX_GPIO_Init+0x11c>)
 80016b0:	f000 fd81 	bl	80021b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <MX_GPIO_Init+0x120>)
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4619      	mov	r1, r3
 80016c8:	4820      	ldr	r0, [pc, #128]	; (800174c <MX_GPIO_Init+0x124>)
 80016ca:	f000 fbd9 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 80016ce:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80016d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4619      	mov	r1, r3
 80016e6:	4816      	ldr	r0, [pc, #88]	; (8001740 <MX_GPIO_Init+0x118>)
 80016e8:	f000 fbca 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	4619      	mov	r1, r3
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <MX_GPIO_Init+0x11c>)
 8001706:	f000 fbbb 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800170a:	2310      	movs	r3, #16
 800170c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4808      	ldr	r0, [pc, #32]	; (8001740 <MX_GPIO_Init+0x118>)
 800171e:	f000 fbaf 	bl	8001e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2028      	movs	r0, #40	; 0x28
 8001728:	f000 fac1 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172c:	2028      	movs	r0, #40	; 0x28
 800172e:	f000 fada 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40010800 	.word	0x40010800
 8001748:	10110000 	.word	0x10110000
 800174c:	40011000 	.word	0x40011000

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001758:	e7fe      	b.n	8001758 <Error_Handler+0x8>
	...

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_MspInit+0x5c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x5c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_MspInit+0x60>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_MspInit+0x60>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000

080017c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_SPI_MspInit+0x98>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d137      	bne.n	8001850 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_SPI_MspInit+0x9c>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_SPI_MspInit+0x9c>)
 80017e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_SPI_MspInit+0x9c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_SPI_MspInit+0x9c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_SPI_MspInit+0x9c>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_SPI_MspInit+0x9c>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001810:	23a0      	movs	r3, #160	; 0xa0
 8001812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4619      	mov	r1, r3
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <HAL_SPI_MspInit+0xa0>)
 8001824:	f000 fb2c 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001828:	2340      	movs	r3, #64	; 0x40
 800182a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <HAL_SPI_MspInit+0xa0>)
 800183c:	f000 fb20 	bl	8001e80 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	2023      	movs	r0, #35	; 0x23
 8001846:	f000 fa32 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800184a:	2023      	movs	r0, #35	; 0x23
 800184c:	f000 fa4b 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40013000 	.word	0x40013000
 800185c:	40021000 	.word	0x40021000
 8001860:	40010800 	.word	0x40010800

08001864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_UART_MspInit+0x80>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d12b      	bne.n	80018dc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_UART_MspInit+0x84>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_UART_MspInit+0x84>)
 800188a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188e:	61d3      	str	r3, [r2, #28]
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_UART_MspInit+0x84>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_UART_MspInit+0x84>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_UART_MspInit+0x84>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_UART_MspInit+0x84>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018b4:	230c      	movs	r3, #12
 80018b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	4809      	ldr	r0, [pc, #36]	; (80018ec <HAL_UART_MspInit+0x88>)
 80018c8:	f000 fada 	bl	8001e80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	2026      	movs	r0, #38	; 0x26
 80018d2:	f000 f9ec 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018d6:	2026      	movs	r0, #38	; 0x26
 80018d8:	f000 fa05 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40004400 	.word	0x40004400
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010800 	.word	0x40010800

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x4>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler+0x4>

0800190e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001936:	f000 f8c7 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <SPI1_IRQHandler+0x10>)
 8001946:	f001 fd11 	bl	800336c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000078 	.word	0x20000078

08001954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <USART2_IRQHandler+0x10>)
 800195a:	f001 ffcf 	bl	80038fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200000d0 	.word	0x200000d0

08001968 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800196c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001970:	f000 fc3a 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f002 fd20 	bl	80043ec <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20005000 	.word	0x20005000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	20000118 	.word	0x20000118
 80019e0:	20000268 	.word	0x20000268

080019e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f0:	f7ff fff8 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019f6:	490c      	ldr	r1, [pc, #48]	; (8001a28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019f8:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <LoopFillZerobss+0x16>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a0c:	4c09      	ldr	r4, [pc, #36]	; (8001a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f002 fced 	bl	80043f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a1e:	f7fe fc2b 	bl	8000278 <main>
  bx lr
 8001a22:	4770      	bx	lr
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a2c:	08004ebc 	.word	0x08004ebc
  ldr r2, =_sbss
 8001a30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a34:	20000268 	.word	0x20000268

08001a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC1_2_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x28>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x28>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f923 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f808 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fe80 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f93b 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f903 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_IncTick+0x1c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	2000011c 	.word	0x2000011c

08001aec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_GetTick+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	2000011c 	.word	0x2000011c

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <__NVIC_EnableIRQ+0x34>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff90 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff2d 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff42 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff35 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d008      	beq.n	8001d44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2204      	movs	r2, #4
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e020      	b.n	8001d86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 020e 	bic.w	r2, r2, #14
 8001d52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d005      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2204      	movs	r2, #4
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e051      	b.n	8001e58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 020e 	bic.w	r2, r2, #14
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <HAL_DMA_Abort_IT+0xd4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d029      	beq.n	8001e32 <HAL_DMA_Abort_IT+0xa2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_DMA_Abort_IT+0xd8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <HAL_DMA_Abort_IT+0x9e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_DMA_Abort_IT+0xdc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01a      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x98>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_DMA_Abort_IT+0xe0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d012      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x92>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_DMA_Abort_IT+0xe4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00a      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x8c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_DMA_Abort_IT+0xe8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d102      	bne.n	8001e16 <HAL_DMA_Abort_IT+0x86>
 8001e10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e14:	e00e      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1a:	e00b      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e20:	e008      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	e005      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2c:	e002      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e2e:	2310      	movs	r3, #16
 8001e30:	e000      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e32:	2301      	movs	r3, #1
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_DMA_Abort_IT+0xec>)
 8001e36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
    } 
  }
  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40020008 	.word	0x40020008
 8001e68:	4002001c 	.word	0x4002001c
 8001e6c:	40020030 	.word	0x40020030
 8001e70:	40020044 	.word	0x40020044
 8001e74:	40020058 	.word	0x40020058
 8001e78:	4002006c 	.word	0x4002006c
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	e169      	b.n	8002168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e94:	2201      	movs	r2, #1
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8158 	bne.w	8002162 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a9a      	ldr	r2, [pc, #616]	; (8002120 <HAL_GPIO_Init+0x2a0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d05e      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ebc:	4a98      	ldr	r2, [pc, #608]	; (8002120 <HAL_GPIO_Init+0x2a0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d875      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ec2:	4a98      	ldr	r2, [pc, #608]	; (8002124 <HAL_GPIO_Init+0x2a4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d058      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ec8:	4a96      	ldr	r2, [pc, #600]	; (8002124 <HAL_GPIO_Init+0x2a4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d86f      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ece:	4a96      	ldr	r2, [pc, #600]	; (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d052      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ed4:	4a94      	ldr	r2, [pc, #592]	; (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d869      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001eda:	4a94      	ldr	r2, [pc, #592]	; (800212c <HAL_GPIO_Init+0x2ac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d04c      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ee0:	4a92      	ldr	r2, [pc, #584]	; (800212c <HAL_GPIO_Init+0x2ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d863      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ee6:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_GPIO_Init+0x2b0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d046      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001eec:	4a90      	ldr	r2, [pc, #576]	; (8002130 <HAL_GPIO_Init+0x2b0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d85d      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d82a      	bhi.n	8001f4c <HAL_GPIO_Init+0xcc>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d859      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <HAL_GPIO_Init+0x80>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08001f67 	.word	0x08001f67
 8001f0c:	08001fa9 	.word	0x08001fa9
 8001f10:	08001faf 	.word	0x08001faf
 8001f14:	08001faf 	.word	0x08001faf
 8001f18:	08001faf 	.word	0x08001faf
 8001f1c:	08001faf 	.word	0x08001faf
 8001f20:	08001faf 	.word	0x08001faf
 8001f24:	08001faf 	.word	0x08001faf
 8001f28:	08001faf 	.word	0x08001faf
 8001f2c:	08001faf 	.word	0x08001faf
 8001f30:	08001faf 	.word	0x08001faf
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001faf 	.word	0x08001faf
 8001f3c:	08001faf 	.word	0x08001faf
 8001f40:	08001faf 	.word	0x08001faf
 8001f44:	08001f5d 	.word	0x08001f5d
 8001f48:	08001f71 	.word	0x08001f71
 8001f4c:	4a79      	ldr	r2, [pc, #484]	; (8002134 <HAL_GPIO_Init+0x2b4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f52:	e02c      	b.n	8001fae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e029      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e024      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e01f      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	330c      	adds	r3, #12
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e01a      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f82:	2304      	movs	r3, #4
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e013      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	611a      	str	r2, [r3, #16]
          break;
 8001f9a:	e009      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	615a      	str	r2, [r3, #20]
          break;
 8001fa6:	e003      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          break;
 8001fae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2bff      	cmp	r3, #255	; 0xff
 8001fb4:	d801      	bhi.n	8001fba <HAL_GPIO_Init+0x13a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_Init+0x13e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	d802      	bhi.n	8001fcc <HAL_GPIO_Init+0x14c>
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x152>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	3b08      	subs	r3, #8
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	210f      	movs	r1, #15
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	431a      	orrs	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80b1 	beq.w	8002162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2bc>)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a40      	ldr	r2, [pc, #256]	; (8002140 <HAL_GPIO_Init+0x2c0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x1ec>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3f      	ldr	r2, [pc, #252]	; (8002144 <HAL_GPIO_Init+0x2c4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1e8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3e      	ldr	r2, [pc, #248]	; (8002148 <HAL_GPIO_Init+0x2c8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1e4>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3d      	ldr	r2, [pc, #244]	; (800214c <HAL_GPIO_Init+0x2cc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1e0>
 800205c:	2303      	movs	r3, #3
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002060:	2304      	movs	r3, #4
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002064:	2302      	movs	r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 800206c:	2300      	movs	r3, #0
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207e:	492f      	ldr	r1, [pc, #188]	; (800213c <HAL_GPIO_Init+0x2bc>)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	492c      	ldr	r1, [pc, #176]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4928      	ldr	r1, [pc, #160]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4922      	ldr	r1, [pc, #136]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	491e      	ldr	r1, [pc, #120]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4918      	ldr	r1, [pc, #96]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4914      	ldr	r1, [pc, #80]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002100:	4013      	ands	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d021      	beq.n	8002154 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e021      	b.n	8002162 <HAL_GPIO_Init+0x2e2>
 800211e:	bf00      	nop
 8002120:	10320000 	.word	0x10320000
 8002124:	10310000 	.word	0x10310000
 8002128:	10220000 	.word	0x10220000
 800212c:	10210000 	.word	0x10210000
 8002130:	10120000 	.word	0x10120000
 8002134:	10110000 	.word	0x10110000
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	40010800 	.word	0x40010800
 8002144:	40010c00 	.word	0x40010c00
 8002148:	40011000 	.word	0x40011000
 800214c:	40011400 	.word	0x40011400
 8002150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	43db      	mvns	r3, r3
 800215c:	4909      	ldr	r1, [pc, #36]	; (8002184 <HAL_GPIO_Init+0x304>)
 800215e:	4013      	ands	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	3301      	adds	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f ae8e 	bne.w	8001e94 <HAL_GPIO_Init+0x14>
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	372c      	adds	r7, #44	; 0x2c
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	807b      	strh	r3, [r7, #2]
 80021c2:	4613      	mov	r3, r2
 80021c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c6:	787b      	ldrb	r3, [r7, #1]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021d2:	e003      	b.n	80021dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	041a      	lsls	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	611a      	str	r2, [r3, #16]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f806 	bl	8002218 <HAL_GPIO_EXTI_Callback>
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40010400 	.word	0x40010400

08002218 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e272      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00c      	beq.n	8002272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002258:	4b8f      	ldr	r3, [pc, #572]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d112      	bne.n	800228a <HAL_RCC_OscConfig+0x5e>
 8002264:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d10b      	bne.n	800228a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06c      	beq.n	8002358 <HAL_RCC_OscConfig+0x12c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d168      	bne.n	8002358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e24c      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x76>
 8002294:	4b80      	ldr	r3, [pc, #512]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a7f      	ldr	r2, [pc, #508]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e02e      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7a      	ldr	r2, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b78      	ldr	r3, [pc, #480]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a77      	ldr	r2, [pc, #476]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e01d      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0xbc>
 80022ce:	4b72      	ldr	r3, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a71      	ldr	r2, [pc, #452]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022e8:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6a      	ldr	r2, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a67      	ldr	r2, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fbf0 	bl	8001aec <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff fbec 	bl	8001aec <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e200      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0xe4>
 800232e:	e014      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fbdc 	bl	8001aec <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7ff fbd8 	bl	8001aec <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1ec      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x10c>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d063      	beq.n	800242e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d11c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x18c>
 800237e:	4b46      	ldr	r3, [pc, #280]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	4b43      	ldr	r3, [pc, #268]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x176>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1c0      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4939      	ldr	r1, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	e03a      	b.n	800242e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff fb91 	bl	8001aec <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7ff fb8d 	bl	8001aec <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1a1      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4927      	ldr	r1, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
 8002400:	e015      	b.n	800242e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fb70 	bl	8001aec <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff fb6c 	bl	8001aec <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e180      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03a      	beq.n	80024b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d019      	beq.n	8002476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_RCC_OscConfig+0x274>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7ff fb50 	bl	8001aec <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff fb4c 	bl	8001aec <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e160      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f000 face 	bl	8002a10 <RCC_Delay>
 8002474:	e01c      	b.n	80024b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_OscConfig+0x274>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7ff fb36 	bl	8001aec <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002482:	e00f      	b.n	80024a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002484:	f7ff fb32 	bl	8001aec <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d908      	bls.n	80024a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e146      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	42420000 	.word	0x42420000
 80024a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b92      	ldr	r3, [pc, #584]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e9      	bne.n	8002484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a6 	beq.w	800260a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a87      	ldr	r2, [pc, #540]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d8:	61d3      	str	r3, [r2, #28]
 80024da:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	4b82      	ldr	r3, [pc, #520]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d118      	bne.n	8002528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f6:	4b7f      	ldr	r3, [pc, #508]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7e      	ldr	r2, [pc, #504]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002502:	f7ff faf3 	bl	8001aec <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250a:	f7ff faef 	bl	8001aec <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e103      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x312>
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a6e      	ldr	r2, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	e02d      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x334>
 8002546:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a66      	ldr	r2, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	e01c      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d10c      	bne.n	8002582 <HAL_RCC_OscConfig+0x356>
 8002568:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a60      	ldr	r2, [pc, #384]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	e00b      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 8002582:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a5a      	ldr	r2, [pc, #360]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d015      	beq.n	80025ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7ff faa3 	bl	8001aec <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7ff fa9f 	bl	8001aec <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0b1      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ee      	beq.n	80025aa <HAL_RCC_OscConfig+0x37e>
 80025cc:	e014      	b.n	80025f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7ff fa8d 	bl	8001aec <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7ff fa89 	bl	8001aec <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e09b      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b3c      	ldr	r3, [pc, #240]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a3b      	ldr	r2, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d061      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d146      	bne.n	80026b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7ff fa5d 	bl	8001aec <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7ff fa59 	bl	8001aec <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e06d      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4921      	ldr	r1, [pc, #132]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a19      	ldr	r1, [r3, #32]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	430b      	orrs	r3, r1
 8002682:	491b      	ldr	r1, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7ff fa2d 	bl	8001aec <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7ff fa29 	bl	8001aec <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x46a>
 80026b4:	e035      	b.n	8002722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff fa16 	bl	8001aec <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff fa12 	bl	8001aec <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e026      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x498>
 80026e2:	e01e      	b.n	8002722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e019      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_OscConfig+0x500>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0d0      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b67      	ldr	r3, [pc, #412]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4965      	ldr	r1, [pc, #404]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0b8      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a4:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	494d      	ldr	r1, [pc, #308]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d040      	beq.n	8002850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d115      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e07f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e073      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06b      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280e:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f023 0203 	bic.w	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4936      	ldr	r1, [pc, #216]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002820:	f7ff f964 	bl	8001aec <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	e00a      	b.n	800283e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	f7ff f960 	bl	8001aec <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e053      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 020c 	and.w	r2, r3, #12
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	429a      	cmp	r2, r3
 800284e:	d1eb      	bne.n	8002828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d210      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	4922      	ldr	r1, [pc, #136]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e032      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4916      	ldr	r1, [pc, #88]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490e      	ldr	r1, [pc, #56]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028be:	f000 f821 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	490a      	ldr	r1, [pc, #40]	; (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	4a09      	ldr	r2, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1cc>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f8c2 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08004e54 	.word	0x08004e54
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_RCC_GetSysClockFreq+0x94>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x30>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x36>
 8002932:	e027      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002936:	613b      	str	r3, [r7, #16]
      break;
 8002938:	e027      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	0c9b      	lsrs	r3, r3, #18
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_RCC_GetSysClockFreq+0x94>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0c5b      	lsrs	r3, r3, #17
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002966:	fb03 f202 	mul.w	r2, r3, r2
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e004      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	613b      	str	r3, [r7, #16]
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	693b      	ldr	r3, [r7, #16]
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	007a1200 	.word	0x007a1200
 80029a0:	08004e6c 	.word	0x08004e6c
 80029a4:	08004e7c 	.word	0x08004e7c
 80029a8:	003d0900 	.word	0x003d0900

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b02      	ldr	r3, [pc, #8]	; (80029bc <HAL_RCC_GetHCLKFreq+0x10>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000000 	.word	0x20000000

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c4:	f7ff fff2 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08004e64 	.word	0x08004e64

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029ec:	f7ff ffde 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0adb      	lsrs	r3, r3, #11
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08004e64 	.word	0x08004e64

08002a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <RCC_Delay+0x34>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <RCC_Delay+0x38>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0a5b      	lsrs	r3, r3, #9
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a2c:	bf00      	nop
  }
  while (Delay --);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	60fa      	str	r2, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f9      	bne.n	8002a2c <RCC_Delay+0x1c>
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000000 	.word	0x20000000
 8002a48:	10624dd3 	.word	0x10624dd3

08002a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e076      	b.n	8002b4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d108      	bne.n	8002a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a6e:	d009      	beq.n	8002a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
 8002a76:	e005      	b.n	8002a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fe8e 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	ea42 0103 	orr.w	r1, r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	0c1a      	lsrs	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f002 0204 	and.w	r2, r2, #4
 8002b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_SPI_Transmit+0x22>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e12d      	b.n	8002dd2 <HAL_SPI_Transmit+0x27e>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b7e:	f7fe ffb5 	bl	8001aec <HAL_GetTick>
 8002b82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d002      	beq.n	8002b9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
 8002b96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b98:	e116      	b.n	8002dc8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_SPI_Transmit+0x52>
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002baa:	e10d      	b.n	8002dc8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf2:	d10f      	bne.n	8002c14 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d007      	beq.n	8002c32 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3a:	d14f      	bne.n	8002cdc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_SPI_Transmit+0xf6>
 8002c44:	8afb      	ldrh	r3, [r7, #22]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d142      	bne.n	8002cd0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	881a      	ldrh	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	1c9a      	adds	r2, r3, #2
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c6e:	e02f      	b.n	8002cd0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d112      	bne.n	8002ca4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	1c9a      	adds	r2, r3, #2
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ca2:	e015      	b.n	8002cd0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca4:	f7fe ff22 	bl	8001aec <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d803      	bhi.n	8002cbc <HAL_SPI_Transmit+0x168>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cba:	d102      	bne.n	8002cc2 <HAL_SPI_Transmit+0x16e>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002cce:	e07b      	b.n	8002dc8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ca      	bne.n	8002c70 <HAL_SPI_Transmit+0x11c>
 8002cda:	e050      	b.n	8002d7e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_SPI_Transmit+0x196>
 8002ce4:	8afb      	ldrh	r3, [r7, #22]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d144      	bne.n	8002d74 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	7812      	ldrb	r2, [r2, #0]
 8002cf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d10:	e030      	b.n	8002d74 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d113      	bne.n	8002d48 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	7812      	ldrb	r2, [r2, #0]
 8002d2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d46:	e015      	b.n	8002d74 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d48:	f7fe fed0 	bl	8001aec <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d803      	bhi.n	8002d60 <HAL_SPI_Transmit+0x20c>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d102      	bne.n	8002d66 <HAL_SPI_Transmit+0x212>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d72:	e029      	b.n	8002dc8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1c9      	bne.n	8002d12 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fcc8 	bl	8003718 <SPI_EndRxTxTransaction>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	77fb      	strb	r3, [r7, #31]
 8002dbe:	e003      	b.n	8002dc8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b088      	sub	sp, #32
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d002      	beq.n	8002e00 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dfe:	e0fb      	b.n	8002ff8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e08:	d112      	bne.n	8002e30 <HAL_SPI_Receive+0x56>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10e      	bne.n	8002e30 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2204      	movs	r2, #4
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f8ef 	bl	800300a <HAL_SPI_TransmitReceive>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	e0e8      	b.n	8003002 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_SPI_Receive+0x64>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0e1      	b.n	8003002 <HAL_SPI_Receive+0x228>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e46:	f7fe fe51 	bl	8001aec <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_SPI_Receive+0x7e>
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e5c:	e0cc      	b.n	8002ff8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2204      	movs	r2, #4
 8002e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d007      	beq.n	8002ee4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d16a      	bne.n	8002fc2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002eec:	e032      	b.n	8002f54 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d115      	bne.n	8002f28 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f103 020c 	add.w	r2, r3, #12
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	7812      	ldrb	r2, [r2, #0]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f26:	e015      	b.n	8002f54 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f28:	f7fe fde0 	bl	8001aec <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d803      	bhi.n	8002f40 <HAL_SPI_Receive+0x166>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d102      	bne.n	8002f46 <HAL_SPI_Receive+0x16c>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f52:	e051      	b.n	8002ff8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1c7      	bne.n	8002eee <HAL_SPI_Receive+0x114>
 8002f5e:	e035      	b.n	8002fcc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d113      	bne.n	8002f96 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	1c9a      	adds	r2, r3, #2
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f94:	e015      	b.n	8002fc2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f96:	f7fe fda9 	bl	8001aec <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d803      	bhi.n	8002fae <HAL_SPI_Receive+0x1d4>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d102      	bne.n	8002fb4 <HAL_SPI_Receive+0x1da>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002fc0:	e01a      	b.n	8002ff8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1c9      	bne.n	8002f60 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fb4f 	bl	8003674 <SPI_EndRxTransaction>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
 8002fee:	e003      	b.n	8002ff8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003000:	7dfb      	ldrb	r3, [r7, #23]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b08c      	sub	sp, #48	; 0x30
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003018:	2301      	movs	r3, #1
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x26>
 800302c:	2302      	movs	r3, #2
 800302e:	e198      	b.n	8003362 <HAL_SPI_TransmitReceive+0x358>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003038:	f7fe fd58 	bl	8001aec <HAL_GetTick>
 800303c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003056:	2b01      	cmp	r3, #1
 8003058:	d00f      	beq.n	800307a <HAL_SPI_TransmitReceive+0x70>
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003060:	d107      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x68>
 800306a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800306e:	2b04      	cmp	r3, #4
 8003070:	d003      	beq.n	800307a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003078:	e16d      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_SPI_TransmitReceive+0x82>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_SPI_TransmitReceive+0x82>
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003092:	e160      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b04      	cmp	r3, #4
 800309e:	d003      	beq.n	80030a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2205      	movs	r2, #5
 80030a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	887a      	ldrh	r2, [r7, #2]
 80030be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d007      	beq.n	80030fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003104:	d17c      	bne.n	8003200 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x10a>
 800310e:	8b7b      	ldrh	r3, [r7, #26]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d16a      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	881a      	ldrh	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	1c9a      	adds	r2, r3, #2
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003138:	e057      	b.n	80031ea <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d11b      	bne.n	8003180 <HAL_SPI_TransmitReceive+0x176>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d016      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x176>
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d113      	bne.n	8003180 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d119      	bne.n	80031c2 <HAL_SPI_TransmitReceive+0x1b8>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d014      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	b292      	uxth	r2, r2
 80031a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031be:	2301      	movs	r3, #1
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031c2:	f7fe fc93 	bl	8001aec <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d80b      	bhi.n	80031ea <HAL_SPI_TransmitReceive+0x1e0>
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d007      	beq.n	80031ea <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80031e8:	e0b5      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1a2      	bne.n	800313a <HAL_SPI_TransmitReceive+0x130>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d19d      	bne.n	800313a <HAL_SPI_TransmitReceive+0x130>
 80031fe:	e080      	b.n	8003302 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_TransmitReceive+0x204>
 8003208:	8b7b      	ldrh	r3, [r7, #26]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d16f      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003234:	e05b      	b.n	80032ee <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11c      	bne.n	800327e <HAL_SPI_TransmitReceive+0x274>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_SPI_TransmitReceive+0x274>
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d114      	bne.n	800327e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d119      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x2b6>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d014      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032bc:	2301      	movs	r3, #1
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032c0:	f7fe fc14 	bl	8001aec <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d803      	bhi.n	80032d8 <HAL_SPI_TransmitReceive+0x2ce>
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d102      	bne.n	80032de <HAL_SPI_TransmitReceive+0x2d4>
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80032ec:	e033      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d19e      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x22c>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d199      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fa06 	bl	8003718 <SPI_EndRxTxTransaction>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d006      	beq.n	8003320 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800331e:	e01a      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800334c:	e003      	b.n	8003356 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800335e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003362:	4618      	mov	r0, r3
 8003364:	3730      	adds	r7, #48	; 0x30
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
    return;
 80033aa:	e0b7      	b.n	800351c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_SPI_IRQHandler+0x5e>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
    return;
 80033c8:	e0a8      	b.n	800351c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_SPI_IRQHandler+0x74>
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 809e 	beq.w	800351c <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8098 	beq.w	800351c <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d023      	beq.n	800343e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d011      	beq.n	8003426 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	e00b      	b.n	800343e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]
        return;
 800343c:	e06e      	b.n	800351c <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d014      	beq.n	8003472 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	2b00      	cmp	r3, #0
 8003478:	d04f      	beq.n	800351a <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003488:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d104      	bne.n	80034a6 <HAL_SPI_IRQHandler+0x13a>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d034      	beq.n	8003510 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0203 	bic.w	r2, r2, #3
 80034b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d011      	beq.n	80034e2 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_SPI_IRQHandler+0x1b8>)
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fc60 	bl	8001d90 <HAL_DMA_Abort_IT>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	4a0d      	ldr	r2, [pc, #52]	; (8003524 <HAL_SPI_IRQHandler+0x1b8>)
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fc4a 	bl	8001d90 <HAL_DMA_Abort_IT>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800350e:	e003      	b.n	8003518 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f809 	bl	8003528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003516:	e000      	b.n	800351a <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8003518:	bf00      	nop
    return;
 800351a:	bf00      	nop
  }
}
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	0800353b 	.word	0x0800353b

08003528 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff ffe7 	bl	8003528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003574:	f7fe faba 	bl	8001aec <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	4413      	add	r3, r2
 8003582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003584:	f7fe fab2 	bl	8001aec <HAL_GetTick>
 8003588:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800358a:	4b39      	ldr	r3, [pc, #228]	; (8003670 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	015b      	lsls	r3, r3, #5
 8003590:	0d1b      	lsrs	r3, r3, #20
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359a:	e054      	b.n	8003646 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a2:	d050      	beq.n	8003646 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035a4:	f7fe faa2 	bl	8001aec <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d902      	bls.n	80035ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d13d      	bne.n	8003636 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d2:	d111      	bne.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035dc:	d004      	beq.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	d107      	bne.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003600:	d10f      	bne.n	8003622 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e017      	b.n	8003666 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3b01      	subs	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d19b      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000000 	.word	0x20000000

08003674 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003688:	d111      	bne.n	80036ae <SPI_EndRxTransaction+0x3a>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003692:	d004      	beq.n	800369e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369c:	d107      	bne.n	80036ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b6:	d117      	bne.n	80036e8 <SPI_EndRxTransaction+0x74>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d112      	bne.n	80036e8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	2101      	movs	r1, #1
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff ff49 	bl	8003564 <SPI_WaitFlagStateUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01a      	beq.n	800370e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e013      	b.n	8003710 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff ff36 	bl	8003564 <SPI_WaitFlagStateUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e000      	b.n	8003710 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff ff18 	bl	8003564 <SPI_WaitFlagStateUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e000      	b.n	800374c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e042      	b.n	80037ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe f872 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fd71 	bl	8004280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b20      	cmp	r3, #32
 8003812:	d16d      	bne.n	80038f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_UART_Transmit+0x2c>
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e066      	b.n	80038f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2221      	movs	r2, #33	; 0x21
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003832:	f7fe f95b 	bl	8001aec <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d108      	bne.n	8003860 <HAL_UART_Transmit+0x6c>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e003      	b.n	8003868 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003868:	e02a      	b.n	80038c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 faf9 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e036      	b.n	80038f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3302      	adds	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e007      	b.n	80038b2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3301      	adds	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1cf      	bne.n	800386a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2140      	movs	r1, #64	; 0x40
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fac9 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e006      	b.n	80038f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b0ba      	sub	sp, #232	; 0xe8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800393a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_UART_IRQHandler+0x66>
 800394e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fbd1 	bl	8004102 <UART_Receive_IT>
      return;
 8003960:	e25b      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80de 	beq.w	8003b28 <HAL_UART_IRQHandler+0x22c>
 800396c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80d1 	beq.w	8003b28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_UART_IRQHandler+0xae>
 8003992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_UART_IRQHandler+0xd2>
 80039b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_UART_IRQHandler+0xf6>
 80039da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <HAL_UART_IRQHandler+0x126>
 80039fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0208 	orr.w	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 81f2 	beq.w	8003e10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_UART_IRQHandler+0x14e>
 8003a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fb5c 	bl	8004102 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_UART_IRQHandler+0x17a>
 8003a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d04f      	beq.n	8003b16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa66 	bl	8003f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d041      	beq.n	8003b0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1d9      	bne.n	8003a8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d013      	beq.n	8003b06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	4a7e      	ldr	r2, [pc, #504]	; (8003cdc <HAL_UART_IRQHandler+0x3e0>)
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe f950 	bl	8001d90 <HAL_DMA_Abort_IT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b00:	4610      	mov	r0, r2
 8003b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e00e      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f99c 	bl	8003e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e00a      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f998 	bl	8003e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e006      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f994 	bl	8003e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b22:	e175      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	bf00      	nop
    return;
 8003b26:	e173      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	f040 814f 	bne.w	8003dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8148 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8141 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80b6 	beq.w	8003ce0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8145 	beq.w	8003e14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b92:	429a      	cmp	r2, r3
 8003b94:	f080 813e 	bcs.w	8003e14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f000 8088 	beq.w	8003cbc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bd8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003be4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1d9      	bne.n	8003bac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c1c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c20:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e1      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c58:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e3      	bne.n	8003c34 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8c:	f023 0310 	bic.w	r3, r3, #16
 8003c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ca0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e3      	bne.n	8003c7a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe f82f 	bl	8001d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8bf 	bl	8003e56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd8:	e09c      	b.n	8003e14 <HAL_UART_IRQHandler+0x518>
 8003cda:	bf00      	nop
 8003cdc:	0800400d 	.word	0x0800400d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 808e 	beq.w	8003e18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8089 	beq.w	8003e18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d2a:	647a      	str	r2, [r7, #68]	; 0x44
 8003d2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e3      	bne.n	8003d06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d62:	633a      	str	r2, [r7, #48]	; 0x30
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e3      	bne.n	8003d3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0310 	bic.w	r3, r3, #16
 8003d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003da8:	61fa      	str	r2, [r7, #28]
 8003daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	69b9      	ldr	r1, [r7, #24]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	617b      	str	r3, [r7, #20]
   return(result);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e3      	bne.n	8003d84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f844 	bl	8003e56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dce:	e023      	b.n	8003e18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <HAL_UART_IRQHandler+0x4f4>
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f923 	bl	8004034 <UART_Transmit_IT>
    return;
 8003dee:	e014      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <HAL_UART_IRQHandler+0x51e>
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f962 	bl	80040d2 <UART_EndTransmit_IT>
    return;
 8003e0e:	e004      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e10:	bf00      	nop
 8003e12:	e002      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e18:	bf00      	nop
  }
}
 8003e1a:	37e8      	adds	r7, #232	; 0xe8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b090      	sub	sp, #64	; 0x40
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7c:	e050      	b.n	8003f20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d04c      	beq.n	8003f20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e8c:	f7fd fe2e 	bl	8001aec <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d241      	bcs.n	8003f20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ebc:	637a      	str	r2, [r7, #52]	; 0x34
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3314      	adds	r3, #20
 8003eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef0:	623a      	str	r2, [r7, #32]
 8003ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e00f      	b.n	8003f40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d09f      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3740      	adds	r7, #64	; 0x40
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b095      	sub	sp, #84	; 0x54
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f70:	643a      	str	r2, [r7, #64]	; 0x40
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e5      	bne.n	8003f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d119      	bne.n	8003ff4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f023 0310 	bic.w	r3, r3, #16
 8003fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fe0:	61ba      	str	r2, [r7, #24]
 8003fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6979      	ldr	r1, [r7, #20]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	613b      	str	r3, [r7, #16]
   return(result);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004002:	bf00      	nop
 8004004:	3754      	adds	r7, #84	; 0x54
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff ff0c 	bl	8003e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b21      	cmp	r3, #33	; 0x21
 8004046:	d13e      	bne.n	80040c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	d114      	bne.n	800407c <UART_Transmit_IT+0x48>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d110      	bne.n	800407c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	1c9a      	adds	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]
 800407a:	e008      	b.n	800408e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	1c59      	adds	r1, r3, #1
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6211      	str	r1, [r2, #32]
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29b      	uxth	r3, r3
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4619      	mov	r1, r3
 800409c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fe94 	bl	8003e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b08c      	sub	sp, #48	; 0x30
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b22      	cmp	r3, #34	; 0x22
 8004114:	f040 80ae 	bne.w	8004274 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004120:	d117      	bne.n	8004152 <UART_Receive_IT+0x50>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d113      	bne.n	8004152 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004140:	b29a      	uxth	r2, r3
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	1c9a      	adds	r2, r3, #2
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
 8004150:	e026      	b.n	80041a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004158:	2300      	movs	r3, #0
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d007      	beq.n	8004176 <UART_Receive_IT+0x74>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <UART_Receive_IT+0x82>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e008      	b.n	8004196 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004190:	b2da      	uxtb	r2, r3
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4619      	mov	r1, r3
 80041ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d15d      	bne.n	8004270 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0220 	bic.w	r2, r2, #32
 80041c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d135      	bne.n	8004266 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	613b      	str	r3, [r7, #16]
   return(result);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004220:	623a      	str	r2, [r7, #32]
 8004222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69f9      	ldr	r1, [r7, #28]
 8004226:	6a3a      	ldr	r2, [r7, #32]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	61bb      	str	r3, [r7, #24]
   return(result);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b10      	cmp	r3, #16
 8004240:	d10a      	bne.n	8004258 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff fdf9 	bl	8003e56 <HAL_UARTEx_RxEventCallback>
 8004264:	e002      	b.n	800426c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fde3 	bl	8003e32 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e002      	b.n	8004276 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3730      	adds	r7, #48	; 0x30
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ba:	f023 030c 	bic.w	r3, r3, #12
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <UART_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7fe fb7e 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	e002      	b.n	80042f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe fb66 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009a      	lsls	r2, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <UART_SetConfig+0x118>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	0119      	lsls	r1, r3, #4
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009a      	lsls	r2, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	fbb2 f2f3 	udiv	r2, r2, r3
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <UART_SetConfig+0x118>)
 800432e:	fba3 0302 	umull	r0, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2064      	movs	r0, #100	; 0x64
 8004336:	fb00 f303 	mul.w	r3, r0, r3
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	; 0x32
 8004340:	4a15      	ldr	r2, [pc, #84]	; (8004398 <UART_SetConfig+0x118>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	4419      	add	r1, r3
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	fbb2 f2f3 	udiv	r2, r2, r3
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <UART_SetConfig+0x118>)
 8004366:	fba3 0302 	umull	r0, r3, r3, r2
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2064      	movs	r0, #100	; 0x64
 800436e:	fb00 f303 	mul.w	r3, r0, r3
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	3332      	adds	r3, #50	; 0x32
 8004378:	4a07      	ldr	r2, [pc, #28]	; (8004398 <UART_SetConfig+0x118>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	440a      	add	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40013800 	.word	0x40013800
 8004398:	51eb851f 	.word	0x51eb851f

0800439c <siprintf>:
 800439c:	b40e      	push	{r1, r2, r3}
 800439e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043a2:	b500      	push	{lr}
 80043a4:	b09c      	sub	sp, #112	; 0x70
 80043a6:	ab1d      	add	r3, sp, #116	; 0x74
 80043a8:	9002      	str	r0, [sp, #8]
 80043aa:	9006      	str	r0, [sp, #24]
 80043ac:	9107      	str	r1, [sp, #28]
 80043ae:	9104      	str	r1, [sp, #16]
 80043b0:	4808      	ldr	r0, [pc, #32]	; (80043d4 <siprintf+0x38>)
 80043b2:	4909      	ldr	r1, [pc, #36]	; (80043d8 <siprintf+0x3c>)
 80043b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b8:	9105      	str	r1, [sp, #20]
 80043ba:	6800      	ldr	r0, [r0, #0]
 80043bc:	a902      	add	r1, sp, #8
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	f000 f98e 	bl	80046e0 <_svfiprintf_r>
 80043c4:	2200      	movs	r2, #0
 80043c6:	9b02      	ldr	r3, [sp, #8]
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	b01c      	add	sp, #112	; 0x70
 80043cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d0:	b003      	add	sp, #12
 80043d2:	4770      	bx	lr
 80043d4:	20000058 	.word	0x20000058
 80043d8:	ffff0208 	.word	0xffff0208

080043dc <memset>:
 80043dc:	4603      	mov	r3, r0
 80043de:	4402      	add	r2, r0
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d100      	bne.n	80043e6 <memset+0xa>
 80043e4:	4770      	bx	lr
 80043e6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ea:	e7f9      	b.n	80043e0 <memset+0x4>

080043ec <__errno>:
 80043ec:	4b01      	ldr	r3, [pc, #4]	; (80043f4 <__errno+0x8>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000058 	.word	0x20000058

080043f8 <__libc_init_array>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	2600      	movs	r6, #0
 80043fc:	4d0c      	ldr	r5, [pc, #48]	; (8004430 <__libc_init_array+0x38>)
 80043fe:	4c0d      	ldr	r4, [pc, #52]	; (8004434 <__libc_init_array+0x3c>)
 8004400:	1b64      	subs	r4, r4, r5
 8004402:	10a4      	asrs	r4, r4, #2
 8004404:	42a6      	cmp	r6, r4
 8004406:	d109      	bne.n	800441c <__libc_init_array+0x24>
 8004408:	f000 fc7a 	bl	8004d00 <_init>
 800440c:	2600      	movs	r6, #0
 800440e:	4d0a      	ldr	r5, [pc, #40]	; (8004438 <__libc_init_array+0x40>)
 8004410:	4c0a      	ldr	r4, [pc, #40]	; (800443c <__libc_init_array+0x44>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	42a6      	cmp	r6, r4
 8004418:	d105      	bne.n	8004426 <__libc_init_array+0x2e>
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004420:	4798      	blx	r3
 8004422:	3601      	adds	r6, #1
 8004424:	e7ee      	b.n	8004404 <__libc_init_array+0xc>
 8004426:	f855 3b04 	ldr.w	r3, [r5], #4
 800442a:	4798      	blx	r3
 800442c:	3601      	adds	r6, #1
 800442e:	e7f2      	b.n	8004416 <__libc_init_array+0x1e>
 8004430:	08004eb4 	.word	0x08004eb4
 8004434:	08004eb4 	.word	0x08004eb4
 8004438:	08004eb4 	.word	0x08004eb4
 800443c:	08004eb8 	.word	0x08004eb8

08004440 <__retarget_lock_acquire_recursive>:
 8004440:	4770      	bx	lr

08004442 <__retarget_lock_release_recursive>:
 8004442:	4770      	bx	lr

08004444 <_free_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4605      	mov	r5, r0
 8004448:	2900      	cmp	r1, #0
 800444a:	d040      	beq.n	80044ce <_free_r+0x8a>
 800444c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004450:	1f0c      	subs	r4, r1, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	bfb8      	it	lt
 8004456:	18e4      	addlt	r4, r4, r3
 8004458:	f000 f8dc 	bl	8004614 <__malloc_lock>
 800445c:	4a1c      	ldr	r2, [pc, #112]	; (80044d0 <_free_r+0x8c>)
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	b933      	cbnz	r3, 8004470 <_free_r+0x2c>
 8004462:	6063      	str	r3, [r4, #4]
 8004464:	6014      	str	r4, [r2, #0]
 8004466:	4628      	mov	r0, r5
 8004468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800446c:	f000 b8d8 	b.w	8004620 <__malloc_unlock>
 8004470:	42a3      	cmp	r3, r4
 8004472:	d908      	bls.n	8004486 <_free_r+0x42>
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	1821      	adds	r1, r4, r0
 8004478:	428b      	cmp	r3, r1
 800447a:	bf01      	itttt	eq
 800447c:	6819      	ldreq	r1, [r3, #0]
 800447e:	685b      	ldreq	r3, [r3, #4]
 8004480:	1809      	addeq	r1, r1, r0
 8004482:	6021      	streq	r1, [r4, #0]
 8004484:	e7ed      	b.n	8004462 <_free_r+0x1e>
 8004486:	461a      	mov	r2, r3
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	b10b      	cbz	r3, 8004490 <_free_r+0x4c>
 800448c:	42a3      	cmp	r3, r4
 800448e:	d9fa      	bls.n	8004486 <_free_r+0x42>
 8004490:	6811      	ldr	r1, [r2, #0]
 8004492:	1850      	adds	r0, r2, r1
 8004494:	42a0      	cmp	r0, r4
 8004496:	d10b      	bne.n	80044b0 <_free_r+0x6c>
 8004498:	6820      	ldr	r0, [r4, #0]
 800449a:	4401      	add	r1, r0
 800449c:	1850      	adds	r0, r2, r1
 800449e:	4283      	cmp	r3, r0
 80044a0:	6011      	str	r1, [r2, #0]
 80044a2:	d1e0      	bne.n	8004466 <_free_r+0x22>
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4408      	add	r0, r1
 80044aa:	6010      	str	r0, [r2, #0]
 80044ac:	6053      	str	r3, [r2, #4]
 80044ae:	e7da      	b.n	8004466 <_free_r+0x22>
 80044b0:	d902      	bls.n	80044b8 <_free_r+0x74>
 80044b2:	230c      	movs	r3, #12
 80044b4:	602b      	str	r3, [r5, #0]
 80044b6:	e7d6      	b.n	8004466 <_free_r+0x22>
 80044b8:	6820      	ldr	r0, [r4, #0]
 80044ba:	1821      	adds	r1, r4, r0
 80044bc:	428b      	cmp	r3, r1
 80044be:	bf01      	itttt	eq
 80044c0:	6819      	ldreq	r1, [r3, #0]
 80044c2:	685b      	ldreq	r3, [r3, #4]
 80044c4:	1809      	addeq	r1, r1, r0
 80044c6:	6021      	streq	r1, [r4, #0]
 80044c8:	6063      	str	r3, [r4, #4]
 80044ca:	6054      	str	r4, [r2, #4]
 80044cc:	e7cb      	b.n	8004466 <_free_r+0x22>
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	20000260 	.word	0x20000260

080044d4 <sbrk_aligned>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4e0e      	ldr	r6, [pc, #56]	; (8004510 <sbrk_aligned+0x3c>)
 80044d8:	460c      	mov	r4, r1
 80044da:	6831      	ldr	r1, [r6, #0]
 80044dc:	4605      	mov	r5, r0
 80044de:	b911      	cbnz	r1, 80044e6 <sbrk_aligned+0x12>
 80044e0:	f000 fbaa 	bl	8004c38 <_sbrk_r>
 80044e4:	6030      	str	r0, [r6, #0]
 80044e6:	4621      	mov	r1, r4
 80044e8:	4628      	mov	r0, r5
 80044ea:	f000 fba5 	bl	8004c38 <_sbrk_r>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	d00a      	beq.n	8004508 <sbrk_aligned+0x34>
 80044f2:	1cc4      	adds	r4, r0, #3
 80044f4:	f024 0403 	bic.w	r4, r4, #3
 80044f8:	42a0      	cmp	r0, r4
 80044fa:	d007      	beq.n	800450c <sbrk_aligned+0x38>
 80044fc:	1a21      	subs	r1, r4, r0
 80044fe:	4628      	mov	r0, r5
 8004500:	f000 fb9a 	bl	8004c38 <_sbrk_r>
 8004504:	3001      	adds	r0, #1
 8004506:	d101      	bne.n	800450c <sbrk_aligned+0x38>
 8004508:	f04f 34ff 	mov.w	r4, #4294967295
 800450c:	4620      	mov	r0, r4
 800450e:	bd70      	pop	{r4, r5, r6, pc}
 8004510:	20000264 	.word	0x20000264

08004514 <_malloc_r>:
 8004514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004518:	1ccd      	adds	r5, r1, #3
 800451a:	f025 0503 	bic.w	r5, r5, #3
 800451e:	3508      	adds	r5, #8
 8004520:	2d0c      	cmp	r5, #12
 8004522:	bf38      	it	cc
 8004524:	250c      	movcc	r5, #12
 8004526:	2d00      	cmp	r5, #0
 8004528:	4607      	mov	r7, r0
 800452a:	db01      	blt.n	8004530 <_malloc_r+0x1c>
 800452c:	42a9      	cmp	r1, r5
 800452e:	d905      	bls.n	800453c <_malloc_r+0x28>
 8004530:	230c      	movs	r3, #12
 8004532:	2600      	movs	r6, #0
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	4630      	mov	r0, r6
 8004538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800453c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004610 <_malloc_r+0xfc>
 8004540:	f000 f868 	bl	8004614 <__malloc_lock>
 8004544:	f8d8 3000 	ldr.w	r3, [r8]
 8004548:	461c      	mov	r4, r3
 800454a:	bb5c      	cbnz	r4, 80045a4 <_malloc_r+0x90>
 800454c:	4629      	mov	r1, r5
 800454e:	4638      	mov	r0, r7
 8004550:	f7ff ffc0 	bl	80044d4 <sbrk_aligned>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	4604      	mov	r4, r0
 8004558:	d155      	bne.n	8004606 <_malloc_r+0xf2>
 800455a:	f8d8 4000 	ldr.w	r4, [r8]
 800455e:	4626      	mov	r6, r4
 8004560:	2e00      	cmp	r6, #0
 8004562:	d145      	bne.n	80045f0 <_malloc_r+0xdc>
 8004564:	2c00      	cmp	r4, #0
 8004566:	d048      	beq.n	80045fa <_malloc_r+0xe6>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	4631      	mov	r1, r6
 800456c:	4638      	mov	r0, r7
 800456e:	eb04 0903 	add.w	r9, r4, r3
 8004572:	f000 fb61 	bl	8004c38 <_sbrk_r>
 8004576:	4581      	cmp	r9, r0
 8004578:	d13f      	bne.n	80045fa <_malloc_r+0xe6>
 800457a:	6821      	ldr	r1, [r4, #0]
 800457c:	4638      	mov	r0, r7
 800457e:	1a6d      	subs	r5, r5, r1
 8004580:	4629      	mov	r1, r5
 8004582:	f7ff ffa7 	bl	80044d4 <sbrk_aligned>
 8004586:	3001      	adds	r0, #1
 8004588:	d037      	beq.n	80045fa <_malloc_r+0xe6>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	442b      	add	r3, r5
 800458e:	6023      	str	r3, [r4, #0]
 8004590:	f8d8 3000 	ldr.w	r3, [r8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d038      	beq.n	800460a <_malloc_r+0xf6>
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	42a2      	cmp	r2, r4
 800459c:	d12b      	bne.n	80045f6 <_malloc_r+0xe2>
 800459e:	2200      	movs	r2, #0
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	e00f      	b.n	80045c4 <_malloc_r+0xb0>
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	1b52      	subs	r2, r2, r5
 80045a8:	d41f      	bmi.n	80045ea <_malloc_r+0xd6>
 80045aa:	2a0b      	cmp	r2, #11
 80045ac:	d917      	bls.n	80045de <_malloc_r+0xca>
 80045ae:	1961      	adds	r1, r4, r5
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	6025      	str	r5, [r4, #0]
 80045b4:	bf18      	it	ne
 80045b6:	6059      	strne	r1, [r3, #4]
 80045b8:	6863      	ldr	r3, [r4, #4]
 80045ba:	bf08      	it	eq
 80045bc:	f8c8 1000 	streq.w	r1, [r8]
 80045c0:	5162      	str	r2, [r4, r5]
 80045c2:	604b      	str	r3, [r1, #4]
 80045c4:	4638      	mov	r0, r7
 80045c6:	f104 060b 	add.w	r6, r4, #11
 80045ca:	f000 f829 	bl	8004620 <__malloc_unlock>
 80045ce:	f026 0607 	bic.w	r6, r6, #7
 80045d2:	1d23      	adds	r3, r4, #4
 80045d4:	1af2      	subs	r2, r6, r3
 80045d6:	d0ae      	beq.n	8004536 <_malloc_r+0x22>
 80045d8:	1b9b      	subs	r3, r3, r6
 80045da:	50a3      	str	r3, [r4, r2]
 80045dc:	e7ab      	b.n	8004536 <_malloc_r+0x22>
 80045de:	42a3      	cmp	r3, r4
 80045e0:	6862      	ldr	r2, [r4, #4]
 80045e2:	d1dd      	bne.n	80045a0 <_malloc_r+0x8c>
 80045e4:	f8c8 2000 	str.w	r2, [r8]
 80045e8:	e7ec      	b.n	80045c4 <_malloc_r+0xb0>
 80045ea:	4623      	mov	r3, r4
 80045ec:	6864      	ldr	r4, [r4, #4]
 80045ee:	e7ac      	b.n	800454a <_malloc_r+0x36>
 80045f0:	4634      	mov	r4, r6
 80045f2:	6876      	ldr	r6, [r6, #4]
 80045f4:	e7b4      	b.n	8004560 <_malloc_r+0x4c>
 80045f6:	4613      	mov	r3, r2
 80045f8:	e7cc      	b.n	8004594 <_malloc_r+0x80>
 80045fa:	230c      	movs	r3, #12
 80045fc:	4638      	mov	r0, r7
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	f000 f80e 	bl	8004620 <__malloc_unlock>
 8004604:	e797      	b.n	8004536 <_malloc_r+0x22>
 8004606:	6025      	str	r5, [r4, #0]
 8004608:	e7dc      	b.n	80045c4 <_malloc_r+0xb0>
 800460a:	605b      	str	r3, [r3, #4]
 800460c:	deff      	udf	#255	; 0xff
 800460e:	bf00      	nop
 8004610:	20000260 	.word	0x20000260

08004614 <__malloc_lock>:
 8004614:	4801      	ldr	r0, [pc, #4]	; (800461c <__malloc_lock+0x8>)
 8004616:	f7ff bf13 	b.w	8004440 <__retarget_lock_acquire_recursive>
 800461a:	bf00      	nop
 800461c:	2000025c 	.word	0x2000025c

08004620 <__malloc_unlock>:
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <__malloc_unlock+0x8>)
 8004622:	f7ff bf0e 	b.w	8004442 <__retarget_lock_release_recursive>
 8004626:	bf00      	nop
 8004628:	2000025c 	.word	0x2000025c

0800462c <__ssputs_r>:
 800462c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	461f      	mov	r7, r3
 8004632:	688e      	ldr	r6, [r1, #8]
 8004634:	4682      	mov	sl, r0
 8004636:	42be      	cmp	r6, r7
 8004638:	460c      	mov	r4, r1
 800463a:	4690      	mov	r8, r2
 800463c:	680b      	ldr	r3, [r1, #0]
 800463e:	d82c      	bhi.n	800469a <__ssputs_r+0x6e>
 8004640:	898a      	ldrh	r2, [r1, #12]
 8004642:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004646:	d026      	beq.n	8004696 <__ssputs_r+0x6a>
 8004648:	6965      	ldr	r5, [r4, #20]
 800464a:	6909      	ldr	r1, [r1, #16]
 800464c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004650:	eba3 0901 	sub.w	r9, r3, r1
 8004654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004658:	1c7b      	adds	r3, r7, #1
 800465a:	444b      	add	r3, r9
 800465c:	106d      	asrs	r5, r5, #1
 800465e:	429d      	cmp	r5, r3
 8004660:	bf38      	it	cc
 8004662:	461d      	movcc	r5, r3
 8004664:	0553      	lsls	r3, r2, #21
 8004666:	d527      	bpl.n	80046b8 <__ssputs_r+0x8c>
 8004668:	4629      	mov	r1, r5
 800466a:	f7ff ff53 	bl	8004514 <_malloc_r>
 800466e:	4606      	mov	r6, r0
 8004670:	b360      	cbz	r0, 80046cc <__ssputs_r+0xa0>
 8004672:	464a      	mov	r2, r9
 8004674:	6921      	ldr	r1, [r4, #16]
 8004676:	f000 fafd 	bl	8004c74 <memcpy>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	6126      	str	r6, [r4, #16]
 8004688:	444e      	add	r6, r9
 800468a:	6026      	str	r6, [r4, #0]
 800468c:	463e      	mov	r6, r7
 800468e:	6165      	str	r5, [r4, #20]
 8004690:	eba5 0509 	sub.w	r5, r5, r9
 8004694:	60a5      	str	r5, [r4, #8]
 8004696:	42be      	cmp	r6, r7
 8004698:	d900      	bls.n	800469c <__ssputs_r+0x70>
 800469a:	463e      	mov	r6, r7
 800469c:	4632      	mov	r2, r6
 800469e:	4641      	mov	r1, r8
 80046a0:	6820      	ldr	r0, [r4, #0]
 80046a2:	f000 faaf 	bl	8004c04 <memmove>
 80046a6:	2000      	movs	r0, #0
 80046a8:	68a3      	ldr	r3, [r4, #8]
 80046aa:	1b9b      	subs	r3, r3, r6
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	4433      	add	r3, r6
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b8:	462a      	mov	r2, r5
 80046ba:	f000 fae9 	bl	8004c90 <_realloc_r>
 80046be:	4606      	mov	r6, r0
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d1e0      	bne.n	8004686 <__ssputs_r+0x5a>
 80046c4:	4650      	mov	r0, sl
 80046c6:	6921      	ldr	r1, [r4, #16]
 80046c8:	f7ff febc 	bl	8004444 <_free_r>
 80046cc:	230c      	movs	r3, #12
 80046ce:	f8ca 3000 	str.w	r3, [sl]
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046dc:	81a3      	strh	r3, [r4, #12]
 80046de:	e7e9      	b.n	80046b4 <__ssputs_r+0x88>

080046e0 <_svfiprintf_r>:
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	4698      	mov	r8, r3
 80046e6:	898b      	ldrh	r3, [r1, #12]
 80046e8:	4607      	mov	r7, r0
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	460d      	mov	r5, r1
 80046ee:	4614      	mov	r4, r2
 80046f0:	b09d      	sub	sp, #116	; 0x74
 80046f2:	d50e      	bpl.n	8004712 <_svfiprintf_r+0x32>
 80046f4:	690b      	ldr	r3, [r1, #16]
 80046f6:	b963      	cbnz	r3, 8004712 <_svfiprintf_r+0x32>
 80046f8:	2140      	movs	r1, #64	; 0x40
 80046fa:	f7ff ff0b 	bl	8004514 <_malloc_r>
 80046fe:	6028      	str	r0, [r5, #0]
 8004700:	6128      	str	r0, [r5, #16]
 8004702:	b920      	cbnz	r0, 800470e <_svfiprintf_r+0x2e>
 8004704:	230c      	movs	r3, #12
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	e0d0      	b.n	80048b0 <_svfiprintf_r+0x1d0>
 800470e:	2340      	movs	r3, #64	; 0x40
 8004710:	616b      	str	r3, [r5, #20]
 8004712:	2300      	movs	r3, #0
 8004714:	9309      	str	r3, [sp, #36]	; 0x24
 8004716:	2320      	movs	r3, #32
 8004718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800471c:	2330      	movs	r3, #48	; 0x30
 800471e:	f04f 0901 	mov.w	r9, #1
 8004722:	f8cd 800c 	str.w	r8, [sp, #12]
 8004726:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80048c8 <_svfiprintf_r+0x1e8>
 800472a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800472e:	4623      	mov	r3, r4
 8004730:	469a      	mov	sl, r3
 8004732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004736:	b10a      	cbz	r2, 800473c <_svfiprintf_r+0x5c>
 8004738:	2a25      	cmp	r2, #37	; 0x25
 800473a:	d1f9      	bne.n	8004730 <_svfiprintf_r+0x50>
 800473c:	ebba 0b04 	subs.w	fp, sl, r4
 8004740:	d00b      	beq.n	800475a <_svfiprintf_r+0x7a>
 8004742:	465b      	mov	r3, fp
 8004744:	4622      	mov	r2, r4
 8004746:	4629      	mov	r1, r5
 8004748:	4638      	mov	r0, r7
 800474a:	f7ff ff6f 	bl	800462c <__ssputs_r>
 800474e:	3001      	adds	r0, #1
 8004750:	f000 80a9 	beq.w	80048a6 <_svfiprintf_r+0x1c6>
 8004754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004756:	445a      	add	r2, fp
 8004758:	9209      	str	r2, [sp, #36]	; 0x24
 800475a:	f89a 3000 	ldrb.w	r3, [sl]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80a1 	beq.w	80048a6 <_svfiprintf_r+0x1c6>
 8004764:	2300      	movs	r3, #0
 8004766:	f04f 32ff 	mov.w	r2, #4294967295
 800476a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800476e:	f10a 0a01 	add.w	sl, sl, #1
 8004772:	9304      	str	r3, [sp, #16]
 8004774:	9307      	str	r3, [sp, #28]
 8004776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800477a:	931a      	str	r3, [sp, #104]	; 0x68
 800477c:	4654      	mov	r4, sl
 800477e:	2205      	movs	r2, #5
 8004780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004784:	4850      	ldr	r0, [pc, #320]	; (80048c8 <_svfiprintf_r+0x1e8>)
 8004786:	f000 fa67 	bl	8004c58 <memchr>
 800478a:	9a04      	ldr	r2, [sp, #16]
 800478c:	b9d8      	cbnz	r0, 80047c6 <_svfiprintf_r+0xe6>
 800478e:	06d0      	lsls	r0, r2, #27
 8004790:	bf44      	itt	mi
 8004792:	2320      	movmi	r3, #32
 8004794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004798:	0711      	lsls	r1, r2, #28
 800479a:	bf44      	itt	mi
 800479c:	232b      	movmi	r3, #43	; 0x2b
 800479e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a2:	f89a 3000 	ldrb.w	r3, [sl]
 80047a6:	2b2a      	cmp	r3, #42	; 0x2a
 80047a8:	d015      	beq.n	80047d6 <_svfiprintf_r+0xf6>
 80047aa:	4654      	mov	r4, sl
 80047ac:	2000      	movs	r0, #0
 80047ae:	f04f 0c0a 	mov.w	ip, #10
 80047b2:	9a07      	ldr	r2, [sp, #28]
 80047b4:	4621      	mov	r1, r4
 80047b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ba:	3b30      	subs	r3, #48	; 0x30
 80047bc:	2b09      	cmp	r3, #9
 80047be:	d94d      	bls.n	800485c <_svfiprintf_r+0x17c>
 80047c0:	b1b0      	cbz	r0, 80047f0 <_svfiprintf_r+0x110>
 80047c2:	9207      	str	r2, [sp, #28]
 80047c4:	e014      	b.n	80047f0 <_svfiprintf_r+0x110>
 80047c6:	eba0 0308 	sub.w	r3, r0, r8
 80047ca:	fa09 f303 	lsl.w	r3, r9, r3
 80047ce:	4313      	orrs	r3, r2
 80047d0:	46a2      	mov	sl, r4
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	e7d2      	b.n	800477c <_svfiprintf_r+0x9c>
 80047d6:	9b03      	ldr	r3, [sp, #12]
 80047d8:	1d19      	adds	r1, r3, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	9103      	str	r1, [sp, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bfbb      	ittet	lt
 80047e2:	425b      	neglt	r3, r3
 80047e4:	f042 0202 	orrlt.w	r2, r2, #2
 80047e8:	9307      	strge	r3, [sp, #28]
 80047ea:	9307      	strlt	r3, [sp, #28]
 80047ec:	bfb8      	it	lt
 80047ee:	9204      	strlt	r2, [sp, #16]
 80047f0:	7823      	ldrb	r3, [r4, #0]
 80047f2:	2b2e      	cmp	r3, #46	; 0x2e
 80047f4:	d10c      	bne.n	8004810 <_svfiprintf_r+0x130>
 80047f6:	7863      	ldrb	r3, [r4, #1]
 80047f8:	2b2a      	cmp	r3, #42	; 0x2a
 80047fa:	d134      	bne.n	8004866 <_svfiprintf_r+0x186>
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	3402      	adds	r4, #2
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	9203      	str	r2, [sp, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	bfb8      	it	lt
 800480a:	f04f 33ff 	movlt.w	r3, #4294967295
 800480e:	9305      	str	r3, [sp, #20]
 8004810:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80048cc <_svfiprintf_r+0x1ec>
 8004814:	2203      	movs	r2, #3
 8004816:	4650      	mov	r0, sl
 8004818:	7821      	ldrb	r1, [r4, #0]
 800481a:	f000 fa1d 	bl	8004c58 <memchr>
 800481e:	b138      	cbz	r0, 8004830 <_svfiprintf_r+0x150>
 8004820:	2240      	movs	r2, #64	; 0x40
 8004822:	9b04      	ldr	r3, [sp, #16]
 8004824:	eba0 000a 	sub.w	r0, r0, sl
 8004828:	4082      	lsls	r2, r0
 800482a:	4313      	orrs	r3, r2
 800482c:	3401      	adds	r4, #1
 800482e:	9304      	str	r3, [sp, #16]
 8004830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004834:	2206      	movs	r2, #6
 8004836:	4826      	ldr	r0, [pc, #152]	; (80048d0 <_svfiprintf_r+0x1f0>)
 8004838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800483c:	f000 fa0c 	bl	8004c58 <memchr>
 8004840:	2800      	cmp	r0, #0
 8004842:	d038      	beq.n	80048b6 <_svfiprintf_r+0x1d6>
 8004844:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <_svfiprintf_r+0x1f4>)
 8004846:	bb1b      	cbnz	r3, 8004890 <_svfiprintf_r+0x1b0>
 8004848:	9b03      	ldr	r3, [sp, #12]
 800484a:	3307      	adds	r3, #7
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	3308      	adds	r3, #8
 8004852:	9303      	str	r3, [sp, #12]
 8004854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004856:	4433      	add	r3, r6
 8004858:	9309      	str	r3, [sp, #36]	; 0x24
 800485a:	e768      	b.n	800472e <_svfiprintf_r+0x4e>
 800485c:	460c      	mov	r4, r1
 800485e:	2001      	movs	r0, #1
 8004860:	fb0c 3202 	mla	r2, ip, r2, r3
 8004864:	e7a6      	b.n	80047b4 <_svfiprintf_r+0xd4>
 8004866:	2300      	movs	r3, #0
 8004868:	f04f 0c0a 	mov.w	ip, #10
 800486c:	4619      	mov	r1, r3
 800486e:	3401      	adds	r4, #1
 8004870:	9305      	str	r3, [sp, #20]
 8004872:	4620      	mov	r0, r4
 8004874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004878:	3a30      	subs	r2, #48	; 0x30
 800487a:	2a09      	cmp	r2, #9
 800487c:	d903      	bls.n	8004886 <_svfiprintf_r+0x1a6>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0c6      	beq.n	8004810 <_svfiprintf_r+0x130>
 8004882:	9105      	str	r1, [sp, #20]
 8004884:	e7c4      	b.n	8004810 <_svfiprintf_r+0x130>
 8004886:	4604      	mov	r4, r0
 8004888:	2301      	movs	r3, #1
 800488a:	fb0c 2101 	mla	r1, ip, r1, r2
 800488e:	e7f0      	b.n	8004872 <_svfiprintf_r+0x192>
 8004890:	ab03      	add	r3, sp, #12
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	462a      	mov	r2, r5
 8004896:	4638      	mov	r0, r7
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <_svfiprintf_r+0x1f8>)
 800489a:	a904      	add	r1, sp, #16
 800489c:	f3af 8000 	nop.w
 80048a0:	1c42      	adds	r2, r0, #1
 80048a2:	4606      	mov	r6, r0
 80048a4:	d1d6      	bne.n	8004854 <_svfiprintf_r+0x174>
 80048a6:	89ab      	ldrh	r3, [r5, #12]
 80048a8:	065b      	lsls	r3, r3, #25
 80048aa:	f53f af2d 	bmi.w	8004708 <_svfiprintf_r+0x28>
 80048ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048b0:	b01d      	add	sp, #116	; 0x74
 80048b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b6:	ab03      	add	r3, sp, #12
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	462a      	mov	r2, r5
 80048bc:	4638      	mov	r0, r7
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <_svfiprintf_r+0x1f8>)
 80048c0:	a904      	add	r1, sp, #16
 80048c2:	f000 f87d 	bl	80049c0 <_printf_i>
 80048c6:	e7eb      	b.n	80048a0 <_svfiprintf_r+0x1c0>
 80048c8:	08004e7e 	.word	0x08004e7e
 80048cc:	08004e84 	.word	0x08004e84
 80048d0:	08004e88 	.word	0x08004e88
 80048d4:	00000000 	.word	0x00000000
 80048d8:	0800462d 	.word	0x0800462d

080048dc <_printf_common>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	4616      	mov	r6, r2
 80048e2:	4699      	mov	r9, r3
 80048e4:	688a      	ldr	r2, [r1, #8]
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	4607      	mov	r7, r0
 80048ea:	4293      	cmp	r3, r2
 80048ec:	bfb8      	it	lt
 80048ee:	4613      	movlt	r3, r2
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f6:	460c      	mov	r4, r1
 80048f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048fc:	b10a      	cbz	r2, 8004902 <_printf_common+0x26>
 80048fe:	3301      	adds	r3, #1
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	0699      	lsls	r1, r3, #26
 8004906:	bf42      	ittt	mi
 8004908:	6833      	ldrmi	r3, [r6, #0]
 800490a:	3302      	addmi	r3, #2
 800490c:	6033      	strmi	r3, [r6, #0]
 800490e:	6825      	ldr	r5, [r4, #0]
 8004910:	f015 0506 	ands.w	r5, r5, #6
 8004914:	d106      	bne.n	8004924 <_printf_common+0x48>
 8004916:	f104 0a19 	add.w	sl, r4, #25
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	6832      	ldr	r2, [r6, #0]
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	42ab      	cmp	r3, r5
 8004922:	dc2b      	bgt.n	800497c <_printf_common+0xa0>
 8004924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004928:	1e13      	subs	r3, r2, #0
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	bf18      	it	ne
 800492e:	2301      	movne	r3, #1
 8004930:	0692      	lsls	r2, r2, #26
 8004932:	d430      	bmi.n	8004996 <_printf_common+0xba>
 8004934:	4649      	mov	r1, r9
 8004936:	4638      	mov	r0, r7
 8004938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800493c:	47c0      	blx	r8
 800493e:	3001      	adds	r0, #1
 8004940:	d023      	beq.n	800498a <_printf_common+0xae>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	6922      	ldr	r2, [r4, #16]
 8004946:	f003 0306 	and.w	r3, r3, #6
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf14      	ite	ne
 800494e:	2500      	movne	r5, #0
 8004950:	6833      	ldreq	r3, [r6, #0]
 8004952:	f04f 0600 	mov.w	r6, #0
 8004956:	bf08      	it	eq
 8004958:	68e5      	ldreq	r5, [r4, #12]
 800495a:	f104 041a 	add.w	r4, r4, #26
 800495e:	bf08      	it	eq
 8004960:	1aed      	subeq	r5, r5, r3
 8004962:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004966:	bf08      	it	eq
 8004968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800496c:	4293      	cmp	r3, r2
 800496e:	bfc4      	itt	gt
 8004970:	1a9b      	subgt	r3, r3, r2
 8004972:	18ed      	addgt	r5, r5, r3
 8004974:	42b5      	cmp	r5, r6
 8004976:	d11a      	bne.n	80049ae <_printf_common+0xd2>
 8004978:	2000      	movs	r0, #0
 800497a:	e008      	b.n	800498e <_printf_common+0xb2>
 800497c:	2301      	movs	r3, #1
 800497e:	4652      	mov	r2, sl
 8004980:	4649      	mov	r1, r9
 8004982:	4638      	mov	r0, r7
 8004984:	47c0      	blx	r8
 8004986:	3001      	adds	r0, #1
 8004988:	d103      	bne.n	8004992 <_printf_common+0xb6>
 800498a:	f04f 30ff 	mov.w	r0, #4294967295
 800498e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004992:	3501      	adds	r5, #1
 8004994:	e7c1      	b.n	800491a <_printf_common+0x3e>
 8004996:	2030      	movs	r0, #48	; 0x30
 8004998:	18e1      	adds	r1, r4, r3
 800499a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049a4:	4422      	add	r2, r4
 80049a6:	3302      	adds	r3, #2
 80049a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ac:	e7c2      	b.n	8004934 <_printf_common+0x58>
 80049ae:	2301      	movs	r3, #1
 80049b0:	4622      	mov	r2, r4
 80049b2:	4649      	mov	r1, r9
 80049b4:	4638      	mov	r0, r7
 80049b6:	47c0      	blx	r8
 80049b8:	3001      	adds	r0, #1
 80049ba:	d0e6      	beq.n	800498a <_printf_common+0xae>
 80049bc:	3601      	adds	r6, #1
 80049be:	e7d9      	b.n	8004974 <_printf_common+0x98>

080049c0 <_printf_i>:
 80049c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	7e0f      	ldrb	r7, [r1, #24]
 80049c6:	4691      	mov	r9, r2
 80049c8:	2f78      	cmp	r7, #120	; 0x78
 80049ca:	4680      	mov	r8, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	469a      	mov	sl, r3
 80049d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049d6:	d807      	bhi.n	80049e8 <_printf_i+0x28>
 80049d8:	2f62      	cmp	r7, #98	; 0x62
 80049da:	d80a      	bhi.n	80049f2 <_printf_i+0x32>
 80049dc:	2f00      	cmp	r7, #0
 80049de:	f000 80d5 	beq.w	8004b8c <_printf_i+0x1cc>
 80049e2:	2f58      	cmp	r7, #88	; 0x58
 80049e4:	f000 80c1 	beq.w	8004b6a <_printf_i+0x1aa>
 80049e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f0:	e03a      	b.n	8004a68 <_printf_i+0xa8>
 80049f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049f6:	2b15      	cmp	r3, #21
 80049f8:	d8f6      	bhi.n	80049e8 <_printf_i+0x28>
 80049fa:	a101      	add	r1, pc, #4	; (adr r1, 8004a00 <_printf_i+0x40>)
 80049fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a00:	08004a59 	.word	0x08004a59
 8004a04:	08004a6d 	.word	0x08004a6d
 8004a08:	080049e9 	.word	0x080049e9
 8004a0c:	080049e9 	.word	0x080049e9
 8004a10:	080049e9 	.word	0x080049e9
 8004a14:	080049e9 	.word	0x080049e9
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	080049e9 	.word	0x080049e9
 8004a20:	080049e9 	.word	0x080049e9
 8004a24:	080049e9 	.word	0x080049e9
 8004a28:	080049e9 	.word	0x080049e9
 8004a2c:	08004b73 	.word	0x08004b73
 8004a30:	08004a99 	.word	0x08004a99
 8004a34:	08004b2d 	.word	0x08004b2d
 8004a38:	080049e9 	.word	0x080049e9
 8004a3c:	080049e9 	.word	0x080049e9
 8004a40:	08004b95 	.word	0x08004b95
 8004a44:	080049e9 	.word	0x080049e9
 8004a48:	08004a99 	.word	0x08004a99
 8004a4c:	080049e9 	.word	0x080049e9
 8004a50:	080049e9 	.word	0x080049e9
 8004a54:	08004b35 	.word	0x08004b35
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	1d1a      	adds	r2, r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	602a      	str	r2, [r5, #0]
 8004a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0a0      	b.n	8004bae <_printf_i+0x1ee>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	0607      	lsls	r7, r0, #24
 8004a72:	f103 0104 	add.w	r1, r3, #4
 8004a76:	6029      	str	r1, [r5, #0]
 8004a78:	d501      	bpl.n	8004a7e <_printf_i+0xbe>
 8004a7a:	681e      	ldr	r6, [r3, #0]
 8004a7c:	e003      	b.n	8004a86 <_printf_i+0xc6>
 8004a7e:	0646      	lsls	r6, r0, #25
 8004a80:	d5fb      	bpl.n	8004a7a <_printf_i+0xba>
 8004a82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	da03      	bge.n	8004a92 <_printf_i+0xd2>
 8004a8a:	232d      	movs	r3, #45	; 0x2d
 8004a8c:	4276      	negs	r6, r6
 8004a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a92:	230a      	movs	r3, #10
 8004a94:	4859      	ldr	r0, [pc, #356]	; (8004bfc <_printf_i+0x23c>)
 8004a96:	e012      	b.n	8004abe <_printf_i+0xfe>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	1d19      	adds	r1, r3, #4
 8004a9e:	6029      	str	r1, [r5, #0]
 8004aa0:	0605      	lsls	r5, r0, #24
 8004aa2:	d501      	bpl.n	8004aa8 <_printf_i+0xe8>
 8004aa4:	681e      	ldr	r6, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <_printf_i+0xee>
 8004aa8:	0641      	lsls	r1, r0, #25
 8004aaa:	d5fb      	bpl.n	8004aa4 <_printf_i+0xe4>
 8004aac:	881e      	ldrh	r6, [r3, #0]
 8004aae:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2308      	moveq	r3, #8
 8004ab4:	230a      	movne	r3, #10
 8004ab6:	4851      	ldr	r0, [pc, #324]	; (8004bfc <_printf_i+0x23c>)
 8004ab8:	2100      	movs	r1, #0
 8004aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004abe:	6865      	ldr	r5, [r4, #4]
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	bfa8      	it	ge
 8004ac4:	6821      	ldrge	r1, [r4, #0]
 8004ac6:	60a5      	str	r5, [r4, #8]
 8004ac8:	bfa4      	itt	ge
 8004aca:	f021 0104 	bicge.w	r1, r1, #4
 8004ace:	6021      	strge	r1, [r4, #0]
 8004ad0:	b90e      	cbnz	r6, 8004ad6 <_printf_i+0x116>
 8004ad2:	2d00      	cmp	r5, #0
 8004ad4:	d04b      	beq.n	8004b6e <_printf_i+0x1ae>
 8004ad6:	4615      	mov	r5, r2
 8004ad8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004adc:	fb03 6711 	mls	r7, r3, r1, r6
 8004ae0:	5dc7      	ldrb	r7, [r0, r7]
 8004ae2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae6:	4637      	mov	r7, r6
 8004ae8:	42bb      	cmp	r3, r7
 8004aea:	460e      	mov	r6, r1
 8004aec:	d9f4      	bls.n	8004ad8 <_printf_i+0x118>
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d10b      	bne.n	8004b0a <_printf_i+0x14a>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	07de      	lsls	r6, r3, #31
 8004af6:	d508      	bpl.n	8004b0a <_printf_i+0x14a>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	6861      	ldr	r1, [r4, #4]
 8004afc:	4299      	cmp	r1, r3
 8004afe:	bfde      	ittt	le
 8004b00:	2330      	movle	r3, #48	; 0x30
 8004b02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b0a:	1b52      	subs	r2, r2, r5
 8004b0c:	6122      	str	r2, [r4, #16]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	4621      	mov	r1, r4
 8004b12:	4640      	mov	r0, r8
 8004b14:	f8cd a000 	str.w	sl, [sp]
 8004b18:	aa03      	add	r2, sp, #12
 8004b1a:	f7ff fedf 	bl	80048dc <_printf_common>
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d14a      	bne.n	8004bb8 <_printf_i+0x1f8>
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	b004      	add	sp, #16
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	f043 0320 	orr.w	r3, r3, #32
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	2778      	movs	r7, #120	; 0x78
 8004b36:	4832      	ldr	r0, [pc, #200]	; (8004c00 <_printf_i+0x240>)
 8004b38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	6829      	ldr	r1, [r5, #0]
 8004b40:	061f      	lsls	r7, r3, #24
 8004b42:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b46:	d402      	bmi.n	8004b4e <_printf_i+0x18e>
 8004b48:	065f      	lsls	r7, r3, #25
 8004b4a:	bf48      	it	mi
 8004b4c:	b2b6      	uxthmi	r6, r6
 8004b4e:	07df      	lsls	r7, r3, #31
 8004b50:	bf48      	it	mi
 8004b52:	f043 0320 	orrmi.w	r3, r3, #32
 8004b56:	6029      	str	r1, [r5, #0]
 8004b58:	bf48      	it	mi
 8004b5a:	6023      	strmi	r3, [r4, #0]
 8004b5c:	b91e      	cbnz	r6, 8004b66 <_printf_i+0x1a6>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	f023 0320 	bic.w	r3, r3, #32
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	2310      	movs	r3, #16
 8004b68:	e7a6      	b.n	8004ab8 <_printf_i+0xf8>
 8004b6a:	4824      	ldr	r0, [pc, #144]	; (8004bfc <_printf_i+0x23c>)
 8004b6c:	e7e4      	b.n	8004b38 <_printf_i+0x178>
 8004b6e:	4615      	mov	r5, r2
 8004b70:	e7bd      	b.n	8004aee <_printf_i+0x12e>
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	6826      	ldr	r6, [r4, #0]
 8004b76:	1d18      	adds	r0, r3, #4
 8004b78:	6961      	ldr	r1, [r4, #20]
 8004b7a:	6028      	str	r0, [r5, #0]
 8004b7c:	0635      	lsls	r5, r6, #24
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	d501      	bpl.n	8004b86 <_printf_i+0x1c6>
 8004b82:	6019      	str	r1, [r3, #0]
 8004b84:	e002      	b.n	8004b8c <_printf_i+0x1cc>
 8004b86:	0670      	lsls	r0, r6, #25
 8004b88:	d5fb      	bpl.n	8004b82 <_printf_i+0x1c2>
 8004b8a:	8019      	strh	r1, [r3, #0]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4615      	mov	r5, r2
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	e7bc      	b.n	8004b0e <_printf_i+0x14e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	2100      	movs	r1, #0
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 f859 	bl	8004c58 <memchr>
 8004ba6:	b108      	cbz	r0, 8004bac <_printf_i+0x1ec>
 8004ba8:	1b40      	subs	r0, r0, r5
 8004baa:	6060      	str	r0, [r4, #4]
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb6:	e7aa      	b.n	8004b0e <_printf_i+0x14e>
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	47d0      	blx	sl
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d0ad      	beq.n	8004b22 <_printf_i+0x162>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	079b      	lsls	r3, r3, #30
 8004bca:	d413      	bmi.n	8004bf4 <_printf_i+0x234>
 8004bcc:	68e0      	ldr	r0, [r4, #12]
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	4298      	cmp	r0, r3
 8004bd2:	bfb8      	it	lt
 8004bd4:	4618      	movlt	r0, r3
 8004bd6:	e7a6      	b.n	8004b26 <_printf_i+0x166>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4632      	mov	r2, r6
 8004bdc:	4649      	mov	r1, r9
 8004bde:	4640      	mov	r0, r8
 8004be0:	47d0      	blx	sl
 8004be2:	3001      	adds	r0, #1
 8004be4:	d09d      	beq.n	8004b22 <_printf_i+0x162>
 8004be6:	3501      	adds	r5, #1
 8004be8:	68e3      	ldr	r3, [r4, #12]
 8004bea:	9903      	ldr	r1, [sp, #12]
 8004bec:	1a5b      	subs	r3, r3, r1
 8004bee:	42ab      	cmp	r3, r5
 8004bf0:	dcf2      	bgt.n	8004bd8 <_printf_i+0x218>
 8004bf2:	e7eb      	b.n	8004bcc <_printf_i+0x20c>
 8004bf4:	2500      	movs	r5, #0
 8004bf6:	f104 0619 	add.w	r6, r4, #25
 8004bfa:	e7f5      	b.n	8004be8 <_printf_i+0x228>
 8004bfc:	08004e8f 	.word	0x08004e8f
 8004c00:	08004ea0 	.word	0x08004ea0

08004c04 <memmove>:
 8004c04:	4288      	cmp	r0, r1
 8004c06:	b510      	push	{r4, lr}
 8004c08:	eb01 0402 	add.w	r4, r1, r2
 8004c0c:	d902      	bls.n	8004c14 <memmove+0x10>
 8004c0e:	4284      	cmp	r4, r0
 8004c10:	4623      	mov	r3, r4
 8004c12:	d807      	bhi.n	8004c24 <memmove+0x20>
 8004c14:	1e43      	subs	r3, r0, #1
 8004c16:	42a1      	cmp	r1, r4
 8004c18:	d008      	beq.n	8004c2c <memmove+0x28>
 8004c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c22:	e7f8      	b.n	8004c16 <memmove+0x12>
 8004c24:	4601      	mov	r1, r0
 8004c26:	4402      	add	r2, r0
 8004c28:	428a      	cmp	r2, r1
 8004c2a:	d100      	bne.n	8004c2e <memmove+0x2a>
 8004c2c:	bd10      	pop	{r4, pc}
 8004c2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c36:	e7f7      	b.n	8004c28 <memmove+0x24>

08004c38 <_sbrk_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4d05      	ldr	r5, [pc, #20]	; (8004c54 <_sbrk_r+0x1c>)
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fc fe98 	bl	8001978 <_sbrk>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_sbrk_r+0x1a>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_sbrk_r+0x1a>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	20000258 	.word	0x20000258

08004c58 <memchr>:
 8004c58:	4603      	mov	r3, r0
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	b2c9      	uxtb	r1, r1
 8004c5e:	4402      	add	r2, r0
 8004c60:	4293      	cmp	r3, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	d101      	bne.n	8004c6a <memchr+0x12>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e003      	b.n	8004c72 <memchr+0x1a>
 8004c6a:	7804      	ldrb	r4, [r0, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	428c      	cmp	r4, r1
 8004c70:	d1f6      	bne.n	8004c60 <memchr+0x8>
 8004c72:	bd10      	pop	{r4, pc}

08004c74 <memcpy>:
 8004c74:	440a      	add	r2, r1
 8004c76:	4291      	cmp	r1, r2
 8004c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c7c:	d100      	bne.n	8004c80 <memcpy+0xc>
 8004c7e:	4770      	bx	lr
 8004c80:	b510      	push	{r4, lr}
 8004c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c86:	4291      	cmp	r1, r2
 8004c88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c8c:	d1f9      	bne.n	8004c82 <memcpy+0xe>
 8004c8e:	bd10      	pop	{r4, pc}

08004c90 <_realloc_r>:
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	4680      	mov	r8, r0
 8004c96:	4614      	mov	r4, r2
 8004c98:	460e      	mov	r6, r1
 8004c9a:	b921      	cbnz	r1, 8004ca6 <_realloc_r+0x16>
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca2:	f7ff bc37 	b.w	8004514 <_malloc_r>
 8004ca6:	b92a      	cbnz	r2, 8004cb4 <_realloc_r+0x24>
 8004ca8:	f7ff fbcc 	bl	8004444 <_free_r>
 8004cac:	4625      	mov	r5, r4
 8004cae:	4628      	mov	r0, r5
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	f000 f81b 	bl	8004cee <_malloc_usable_size_r>
 8004cb8:	4284      	cmp	r4, r0
 8004cba:	4607      	mov	r7, r0
 8004cbc:	d802      	bhi.n	8004cc4 <_realloc_r+0x34>
 8004cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cc2:	d812      	bhi.n	8004cea <_realloc_r+0x5a>
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fc24 	bl	8004514 <_malloc_r>
 8004ccc:	4605      	mov	r5, r0
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d0ed      	beq.n	8004cae <_realloc_r+0x1e>
 8004cd2:	42bc      	cmp	r4, r7
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	bf28      	it	cs
 8004cda:	463a      	movcs	r2, r7
 8004cdc:	f7ff ffca 	bl	8004c74 <memcpy>
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	f7ff fbae 	bl	8004444 <_free_r>
 8004ce8:	e7e1      	b.n	8004cae <_realloc_r+0x1e>
 8004cea:	4635      	mov	r5, r6
 8004cec:	e7df      	b.n	8004cae <_realloc_r+0x1e>

08004cee <_malloc_usable_size_r>:
 8004cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf2:	1f18      	subs	r0, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bfbc      	itt	lt
 8004cf8:	580b      	ldrlt	r3, [r1, r0]
 8004cfa:	18c0      	addlt	r0, r0, r3
 8004cfc:	4770      	bx	lr
	...

08004d00 <_init>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr

08004d0c <_fini>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	bf00      	nop
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr
